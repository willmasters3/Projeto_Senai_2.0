{"version":3,"sources":["../../node_modules/chai/lib/chai/utils/index.js","../../../../node_modules/check-error/index.js","../../node_modules/chai/lib/chai/utils/flag.js","../../node_modules/chai/lib/chai/utils/test.js","../../node_modules/chai/lib/chai/utils/type-detect.js","../../node_modules/assertion-error/index.js","../../node_modules/chai/lib/chai/utils/expectTypes.js","../../node_modules/chai/lib/chai/utils/getActual.js","../../../../node_modules/loupe/lib/helpers.js","../../../../node_modules/loupe/lib/array.js","../../../../node_modules/loupe/lib/typedarray.js","../../../../node_modules/loupe/lib/date.js","../../../../node_modules/loupe/lib/function.js","../../../../node_modules/loupe/lib/map.js","../../../../node_modules/loupe/lib/number.js","../../../../node_modules/loupe/lib/bigint.js","../../../../node_modules/loupe/lib/regexp.js","../../../../node_modules/loupe/lib/set.js","../../../../node_modules/loupe/lib/string.js","../../../../node_modules/loupe/lib/symbol.js","../../../../node_modules/loupe/lib/promise.js","../../../../node_modules/loupe/lib/object.js","../../../../node_modules/loupe/lib/class.js","../../../../node_modules/loupe/lib/arguments.js","../../../../node_modules/loupe/lib/error.js","../../../../node_modules/loupe/lib/html.js","../../../../node_modules/loupe/lib/index.js","../../node_modules/chai/lib/chai/config.js","../../node_modules/chai/lib/chai/utils/inspect.js","../../node_modules/chai/lib/chai/utils/objDisplay.js","../../node_modules/chai/lib/chai/utils/getMessage.js","../../node_modules/chai/lib/chai/utils/transferFlags.js","../../../../node_modules/deep-eql/index.js","../../../../node_modules/pathval/index.js","../../node_modules/chai/lib/chai/assertion.js","../../node_modules/chai/lib/chai/utils/isProxyEnabled.js","../../node_modules/chai/lib/chai/utils/addProperty.js","../../node_modules/chai/lib/chai/utils/addLengthGuard.js","../../node_modules/chai/lib/chai/utils/getProperties.js","../../node_modules/chai/lib/chai/utils/proxify.js","../../node_modules/chai/lib/chai/utils/addMethod.js","../../node_modules/chai/lib/chai/utils/overwriteProperty.js","../../node_modules/chai/lib/chai/utils/overwriteMethod.js","../../node_modules/chai/lib/chai/utils/addChainableMethod.js","../../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","../../node_modules/chai/lib/chai/utils/compareByInspect.js","../../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","../../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","../../node_modules/chai/lib/chai/utils/isNaN.js","../../node_modules/chai/lib/chai/utils/getOperator.js","../../node_modules/chai/lib/chai/core/assertions.js","../../node_modules/chai/lib/chai/interface/expect.js","../../node_modules/chai/lib/chai/interface/assert.js","../../node_modules/chai/register-assert.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n// Dependencies that are used for multiple exports are required here only once\nimport * as checkError from 'check-error';\n\n// test utility\nexport {test} from './test.js';\n\n// type utility\nimport {type} from './type-detect.js';\nexport {type};\n\n// expectTypes utility\nexport {expectTypes} from './expectTypes.js';\n\n// message utility\nexport {getMessage} from './getMessage.js';\n\n// actual utility\nexport {getActual} from './getActual.js';\n\n// Inspect util\nexport {inspect} from './inspect.js';\n\n// Object Display util\nexport {objDisplay} from './objDisplay.js';\n\n// Flag utility\nexport {flag} from './flag.js';\n\n// Flag transferring utility\nexport {transferFlags} from './transferFlags.js';\n\n// Deep equal utility\nexport {default as eql} from 'deep-eql';\n\n// Deep path info\nexport {getPathInfo, hasProperty} from 'pathval';\n\n/**\n * Function name\n *\n * @param {Function} fn\n * @returns {string}\n */\nexport function getName(fn) {\n  return fn.name\n}\n\n// add Property\nexport {addProperty} from './addProperty.js';\n\n// add Method\nexport {addMethod} from './addMethod.js';\n\n// overwrite Property\nexport {overwriteProperty} from './overwriteProperty.js';\n\n// overwrite Method\nexport {overwriteMethod} from './overwriteMethod.js';\n\n// Add a chainable method\nexport {addChainableMethod} from './addChainableMethod.js';\n\n// Overwrite chainable method\nexport {overwriteChainableMethod} from './overwriteChainableMethod.js';\n\n// Compare by inspect method\nexport {compareByInspect} from './compareByInspect.js';\n\n// Get own enumerable property symbols method\nexport {getOwnEnumerablePropertySymbols} from './getOwnEnumerablePropertySymbols.js';\n\n// Get own enumerable properties method\nexport {getOwnEnumerableProperties} from './getOwnEnumerableProperties.js';\n\n// Checks error against a given set of criteria\nexport {checkError};\n\n// Proxify util\nexport {proxify} from './proxify.js';\n\n// addLengthGuard util\nexport {addLengthGuard} from './addLengthGuard.js';\n\n// isProxyEnabled helper\nexport {isProxyEnabled} from './isProxyEnabled.js';\n\n// isNaN method\nexport {isNaN} from './isNaN.js';\n\n// getOperator method\nexport {getOperator} from './getOperator.js';\n\n/**\n * Determines if an object is a `RegExp`\n * This is used since `instanceof` will not work in virtual contexts\n *\n * @param {*} obj Object to test\n * @returns {boolean}\n */\nexport function isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nexport function isNumeric(obj) {\n  return ['Number', 'BigInt'].includes(type(obj))\n}\n","function isErrorInstance(obj) {\n  // eslint-disable-next-line prefer-reflect\n  return obj instanceof Error || Object.prototype.toString.call(obj) === '[object Error]';\n}\n\nfunction isRegExp(obj) {\n  // eslint-disable-next-line prefer-reflect\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return isErrorInstance(errorLike) && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (isErrorInstance(errorLike)) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if ((typeof errorLike === 'object' || typeof errorLike === 'function') && errorLike.prototype) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  const comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (isRegExp(errMatcher)) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  let constructorName = errorLike;\n  if (isErrorInstance(errorLike)) {\n    constructorName = errorLike.constructor.name;\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = errorLike.name;\n    if (constructorName === '') {\n      const newConstructorName = (new errorLike().name); // eslint-disable-line new-cap\n      constructorName = newConstructorName || constructorName;\n    }\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  let msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nexport { compatibleInstance, compatibleConstructor, compatibleMessage, getMessage, getConstructorName };\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {object} obj object constructed Assertion\n * @param {string} key\n * @param {unknown} value (optional)\n * @namespace Utils\n * @name flag\n * @returns {unknown | undefined}\n * @private\n */\nexport function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n}\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {flag} from './flag.js';\n\n/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {object} obj (constructed Assertion)\n * @param {unknown} args\n * @returns {unknown}\n * @namespace Utils\n * @name test\n */\nexport function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n}\n","/**\n * @param {unknown} obj\n * @returns {string}\n */\nexport function type(obj) {\n  if (typeof obj === 'undefined') {\n    return 'undefined';\n  }\n  \n  if (obj === null) {\n    return 'null';\n  }\n\n  const stringTag = obj[Symbol.toStringTag];\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n  const type = Object.prototype.toString.call(obj).slice(8, -1);\n  return type;\n}\n","// deno-fmt-ignore-file\n// deno-lint-ignore-file\n// This code was bundled using `deno bundle` and it's not recommended to edit it manually\n\nconst canElideFrames = \"captureStackTrace\" in Error;\nclass AssertionError extends Error {\n    message;\n    get name() {\n        return \"AssertionError\";\n    }\n    get ok() {\n        return false;\n    }\n    constructor(message = \"Unspecified AssertionError\", props, ssf){\n        super(message);\n        this.message = message;\n        if (canElideFrames) {\n            Error.captureStackTrace(this, ssf || AssertionError);\n        }\n        for(const key in props){\n            if (!(key in this)) {\n                this[key] = props[key];\n            }\n        }\n    }\n    toJSON(stack) {\n        return {\n            ...this,\n            name: this.name,\n            message: this.message,\n            ok: false,\n            stack: stack !== false ? this.stack : undefined\n        };\n    }\n}\nclass AssertionResult {\n    get name() {\n        return \"AssertionResult\";\n    }\n    get ok() {\n        return true;\n    }\n    constructor(props){\n        for(const key in props){\n            if (!(key in this)) {\n                this[key] = props[key];\n            }\n        }\n    }\n    toJSON() {\n        return {\n            ...this,\n            name: this.name,\n            ok: this.ok\n        };\n    }\n}\nexport { AssertionError as AssertionError };\nexport { AssertionResult as AssertionResult };\n\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {AssertionError} from 'assertion-error';\nimport {flag} from './flag.js';\nimport {type} from './type-detect.js';\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {unknown} obj constructed Assertion\n * @param {Array} types A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @public\n */\nexport function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n}\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @namespace Utils\n * @name getActual\n */\nexport function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n}\n","const ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39'],\n};\nconst styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red',\n};\nexport const truncator = '…';\nfunction colorise(value, styleType) {\n    const color = ansiColors[styles[styleType]] || ansiColors[styleType] || '';\n    if (!color) {\n        return String(value);\n    }\n    return `\\u001b[${color[0]}m${String(value)}\\u001b[${color[1]}m`;\n}\nexport function normaliseOptions({ showHidden = false, depth = 2, colors = false, customInspect = true, showProxy = false, maxArrayLength = Infinity, breakLength = Infinity, seen = [], \n// eslint-disable-next-line no-shadow\ntruncate = Infinity, stylize = String, } = {}, inspect) {\n    const options = {\n        showHidden: Boolean(showHidden),\n        depth: Number(depth),\n        colors: Boolean(colors),\n        customInspect: Boolean(customInspect),\n        showProxy: Boolean(showProxy),\n        maxArrayLength: Number(maxArrayLength),\n        breakLength: Number(breakLength),\n        truncate: Number(truncate),\n        seen,\n        inspect,\n        stylize,\n    };\n    if (options.colors) {\n        options.stylize = colorise;\n    }\n    return options;\n}\nfunction isHighSurrogate(char) {\n    return char >= '\\ud800' && char <= '\\udbff';\n}\nexport function truncate(string, length, tail = truncator) {\n    string = String(string);\n    const tailLength = tail.length;\n    const stringLength = string.length;\n    if (tailLength > length && stringLength > tailLength) {\n        return tail;\n    }\n    if (stringLength > length && stringLength > tailLength) {\n        let end = length - tailLength;\n        if (end > 0 && isHighSurrogate(string[end - 1])) {\n            end = end - 1;\n        }\n        return `${string.slice(0, end)}${tail}`;\n    }\n    return string;\n}\n// eslint-disable-next-line complexity\nexport function inspectList(list, options, inspectItem, separator = ', ') {\n    inspectItem = inspectItem || options.inspect;\n    const size = list.length;\n    if (size === 0)\n        return '';\n    const originalLength = options.truncate;\n    let output = '';\n    let peek = '';\n    let truncated = '';\n    for (let i = 0; i < size; i += 1) {\n        const last = i + 1 === list.length;\n        const secondToLast = i + 2 === list.length;\n        truncated = `${truncator}(${list.length - i})`;\n        const value = list[i];\n        // If there is more than one remaining we need to account for a separator of `, `\n        options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n        const string = peek || inspectItem(value, options) + (last ? '' : separator);\n        const nextLength = output.length + string.length;\n        const truncatedLength = nextLength + truncated.length;\n        // If this is the last element, and adding it would\n        // take us over length, but adding the truncator wouldn't - then break now\n        if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n            break;\n        }\n        // If this isn't the last or second to last element to scan,\n        // but the string is already over length then break here\n        if (!last && !secondToLast && truncatedLength > originalLength) {\n            break;\n        }\n        // Peek at the next string to determine if we should\n        // break early before adding this item to the output\n        peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator);\n        // If we have one element left, but this element and\n        // the next takes over length, the break early\n        if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n            break;\n        }\n        output += string;\n        // If the next element takes us to length -\n        // but there are more after that, then we should truncate now\n        if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n            truncated = `${truncator}(${list.length - i - 1})`;\n            break;\n        }\n        truncated = '';\n    }\n    return `${output}${truncated}`;\n}\nfunction quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n        return key;\n    }\n    return JSON.stringify(key)\n        .replace(/'/g, \"\\\\'\")\n        .replace(/\\\\\"/g, '\"')\n        .replace(/(^\"|\"$)/g, \"'\");\n}\nexport function inspectProperty([key, value], options) {\n    options.truncate -= 2;\n    if (typeof key === 'string') {\n        key = quoteComplexKey(key);\n    }\n    else if (typeof key !== 'number') {\n        key = `[${options.inspect(key, options)}]`;\n    }\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return `${key}: ${value}`;\n}\n","import { inspectList, inspectProperty } from './helpers.js';\nexport default function inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    const nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length)\n        return '[]';\n    options.truncate -= 4;\n    const listContents = inspectList(array, options);\n    options.truncate -= listContents.length;\n    let propertyContents = '';\n    if (nonIndexProperties.length) {\n        propertyContents = inspectList(nonIndexProperties.map(key => [key, array[key]]), options, inspectProperty);\n    }\n    return `[ ${listContents}${propertyContents ? `, ${propertyContents}` : ''} ]`;\n}\n","import { inspectList, inspectProperty, truncate, truncator } from './helpers.js';\nconst getArrayName = (array) => {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    // @ts-ignore\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n        return 'Buffer';\n    }\n    if (array[Symbol.toStringTag]) {\n        return array[Symbol.toStringTag];\n    }\n    return array.constructor.name;\n};\nexport default function inspectTypedArray(array, options) {\n    const name = getArrayName(array);\n    options.truncate -= name.length + 4;\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    const nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length)\n        return `${name}[]`;\n    // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n    let output = '';\n    for (let i = 0; i < array.length; i++) {\n        const string = `${options.stylize(truncate(array[i], options.truncate), 'number')}${i === array.length - 1 ? '' : ', '}`;\n        options.truncate -= string.length;\n        if (array[i] !== array.length && options.truncate <= 3) {\n            output += `${truncator}(${array.length - array[i] + 1})`;\n            break;\n        }\n        output += string;\n    }\n    let propertyContents = '';\n    if (nonIndexProperties.length) {\n        propertyContents = inspectList(nonIndexProperties.map(key => [key, array[key]]), options, inspectProperty);\n    }\n    return `${name}[ ${output}${propertyContents ? `, ${propertyContents}` : ''} ]`;\n}\n","import { truncate } from './helpers.js';\nexport default function inspectDate(dateObject, options) {\n    const stringRepresentation = dateObject.toJSON();\n    if (stringRepresentation === null) {\n        return 'Invalid Date';\n    }\n    const split = stringRepresentation.split('T');\n    const date = split[0];\n    // If we need to - truncate the time portion, but never the date\n    return options.stylize(`${date}T${truncate(split[1], options.truncate - date.length - 1)}`, 'date');\n}\n","import { truncate } from './helpers.js';\nexport default function inspectFunction(func, options) {\n    const functionType = func[Symbol.toStringTag] || 'Function';\n    const name = func.name;\n    if (!name) {\n        return options.stylize(`[${functionType}]`, 'special');\n    }\n    return options.stylize(`[${functionType} ${truncate(name, options.truncate - 11)}]`, 'special');\n}\n","import { inspectList } from './helpers.js';\nfunction inspectMapEntry([key, value], options) {\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return `${key} => ${value}`;\n}\n// IE11 doesn't support `map.entries()`\nfunction mapToEntries(map) {\n    const entries = [];\n    map.forEach((value, key) => {\n        entries.push([key, value]);\n    });\n    return entries;\n}\nexport default function inspectMap(map, options) {\n    const size = map.size - 1;\n    if (size <= 0) {\n        return 'Map{}';\n    }\n    options.truncate -= 7;\n    return `Map{ ${inspectList(mapToEntries(map), options, inspectMapEntry)} }`;\n}\n","import { truncate } from './helpers.js';\nconst isNaN = Number.isNaN || (i => i !== i); // eslint-disable-line no-self-compare\nexport default function inspectNumber(number, options) {\n    if (isNaN(number)) {\n        return options.stylize('NaN', 'number');\n    }\n    if (number === Infinity) {\n        return options.stylize('Infinity', 'number');\n    }\n    if (number === -Infinity) {\n        return options.stylize('-Infinity', 'number');\n    }\n    if (number === 0) {\n        return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n    return options.stylize(truncate(String(number), options.truncate), 'number');\n}\n","import { truncate, truncator } from './helpers.js';\nexport default function inspectBigInt(number, options) {\n    let nums = truncate(number.toString(), options.truncate - 1);\n    if (nums !== truncator)\n        nums += 'n';\n    return options.stylize(nums, 'bigint');\n}\n","import { truncate } from './helpers.js';\nexport default function inspectRegExp(value, options) {\n    const flags = value.toString().split('/')[2];\n    const sourceLength = options.truncate - (2 + flags.length);\n    const source = value.source;\n    return options.stylize(`/${truncate(source, sourceLength)}/${flags}`, 'regexp');\n}\n","import { inspectList } from './helpers.js';\n// IE11 doesn't support `Array.from(set)`\nfunction arrayFromSet(set) {\n    const values = [];\n    set.forEach(value => {\n        values.push(value);\n    });\n    return values;\n}\nexport default function inspectSet(set, options) {\n    if (set.size === 0)\n        return 'Set{}';\n    options.truncate -= 7;\n    return `Set{ ${inspectList(arrayFromSet(set), options)} }`;\n}\n","import { truncate } from './helpers.js';\nconst stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" +\n    '\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]', 'g');\nconst escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\',\n};\nconst hex = 16;\nconst unicodeLength = 4;\nfunction escape(char) {\n    return (escapeCharacters[char] ||\n        `\\\\u${`0000${char.charCodeAt(0).toString(hex)}`.slice(-unicodeLength)}`);\n}\nexport default function inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n        string = string.replace(stringEscapeChars, escape);\n    }\n    return options.stylize(`'${truncate(string, options.truncate - 2)}'`, 'string');\n}\n","export default function inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n        return value.description ? `Symbol(${value.description})` : 'Symbol()';\n    }\n    return value.toString();\n}\n","let getPromiseValue = () => 'Promise{…}';\ntry {\n    // @ts-ignore\n    const { getPromiseDetails, kPending, kRejected } = process.binding('util');\n    if (Array.isArray(getPromiseDetails(Promise.resolve()))) {\n        getPromiseValue = (value, options) => {\n            const [state, innerValue] = getPromiseDetails(value);\n            if (state === kPending) {\n                return 'Promise{<pending>}';\n            }\n            return `Promise${state === kRejected ? '!' : ''}{${options.inspect(innerValue, options)}}`;\n        };\n    }\n}\ncatch (notNode) {\n    /* ignore */\n}\nexport default getPromiseValue;\n","import { inspectList, inspectProperty } from './helpers.js';\nexport default function inspectObject(object, options) {\n    const properties = Object.getOwnPropertyNames(object);\n    const symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n    if (properties.length === 0 && symbols.length === 0) {\n        return '{}';\n    }\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n    if (options.seen.includes(object)) {\n        return '[Circular]';\n    }\n    options.seen.push(object);\n    const propertyContents = inspectList(properties.map(key => [key, object[key]]), options, inspectProperty);\n    const symbolContents = inspectList(symbols.map(key => [key, object[key]]), options, inspectProperty);\n    options.seen.pop();\n    let sep = '';\n    if (propertyContents && symbolContents) {\n        sep = ', ';\n    }\n    return `{ ${propertyContents}${sep}${symbolContents} }`;\n}\n","import inspectObject from './object.js';\nconst toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\nexport default function inspectClass(value, options) {\n    let name = '';\n    if (toStringTag && toStringTag in value) {\n        name = value[toStringTag];\n    }\n    name = name || value.constructor.name;\n    // Babel transforms anonymous classes to the name `_class`\n    if (!name || name === '_class') {\n        name = '<Anonymous Class>';\n    }\n    options.truncate -= name.length;\n    return `${name}${inspectObject(value, options)}`;\n}\n","import { inspectList } from './helpers.js';\nexport default function inspectArguments(args, options) {\n    if (args.length === 0)\n        return 'Arguments[]';\n    options.truncate -= 13;\n    return `Arguments[ ${inspectList(args, options)} ]`;\n}\n","import { inspectList, inspectProperty, truncate } from './helpers.js';\nconst errorKeys = [\n    'stack',\n    'line',\n    'column',\n    'name',\n    'message',\n    'fileName',\n    'lineNumber',\n    'columnNumber',\n    'number',\n    'description',\n    'cause',\n];\nexport default function inspectObject(error, options) {\n    const properties = Object.getOwnPropertyNames(error).filter(key => errorKeys.indexOf(key) === -1);\n    const name = error.name;\n    options.truncate -= name.length;\n    let message = '';\n    if (typeof error.message === 'string') {\n        message = truncate(error.message, options.truncate);\n    }\n    else {\n        properties.unshift('message');\n    }\n    message = message ? `: ${message}` : '';\n    options.truncate -= message.length + 5;\n    options.seen = options.seen || [];\n    if (options.seen.includes(error)) {\n        return '[Circular]';\n    }\n    options.seen.push(error);\n    const propertyContents = inspectList(properties.map(key => [key, error[key]]), options, inspectProperty);\n    return `${name}${message}${propertyContents ? ` { ${propertyContents} }` : ''}`;\n}\n","import { inspectList, truncator } from './helpers.js';\nexport function inspectAttribute([key, value], options) {\n    options.truncate -= 3;\n    if (!value) {\n        return `${options.stylize(String(key), 'yellow')}`;\n    }\n    return `${options.stylize(String(key), 'yellow')}=${options.stylize(`\"${value}\"`, 'string')}`;\n}\n// @ts-ignore (Deno doesn't have Element)\nexport function inspectHTMLCollection(collection, options) {\n    // eslint-disable-next-line no-use-before-define\n    return inspectList(collection, options, inspectHTML, '\\n');\n}\n// @ts-ignore (Deno doesn't have Element)\nexport default function inspectHTML(element, options) {\n    const properties = element.getAttributeNames();\n    const name = element.tagName.toLowerCase();\n    const head = options.stylize(`<${name}`, 'special');\n    const headClose = options.stylize(`>`, 'special');\n    const tail = options.stylize(`</${name}>`, 'special');\n    options.truncate -= name.length * 2 + 5;\n    let propertyContents = '';\n    if (properties.length > 0) {\n        propertyContents += ' ';\n        propertyContents += inspectList(properties.map((key) => [key, element.getAttribute(key)]), options, inspectAttribute, ' ');\n    }\n    options.truncate -= propertyContents.length;\n    const truncate = options.truncate;\n    let children = inspectHTMLCollection(element.children, options);\n    if (children && children.length > truncate) {\n        children = `${truncator}(${element.children.length})`;\n    }\n    return `${head}${propertyContents}${headClose}${children}${tail}`;\n}\n","/* !\n * loupe\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nimport inspectArray from './array.js';\nimport inspectTypedArray from './typedarray.js';\nimport inspectDate from './date.js';\nimport inspectFunction from './function.js';\nimport inspectMap from './map.js';\nimport inspectNumber from './number.js';\nimport inspectBigInt from './bigint.js';\nimport inspectRegExp from './regexp.js';\nimport inspectSet from './set.js';\nimport inspectString from './string.js';\nimport inspectSymbol from './symbol.js';\nimport inspectPromise from './promise.js';\nimport inspectClass from './class.js';\nimport inspectObject from './object.js';\nimport inspectArguments from './arguments.js';\nimport inspectError from './error.js';\nimport inspectHTMLElement, { inspectHTMLCollection } from './html.js';\nimport { normaliseOptions } from './helpers.js';\nconst symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\nconst chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\nlet nodeInspect = false;\ntry {\n    // eslint-disable-next-line global-require\n    // @ts-ignore\n    const nodeUtil = require('util');\n    nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;\n}\ncatch (noNodeInspect) {\n    nodeInspect = false;\n}\nconst constructorMap = new WeakMap();\nconst stringTagMap = {};\nconst baseTypesMap = {\n    undefined: (value, options) => options.stylize('undefined', 'undefined'),\n    null: (value, options) => options.stylize('null', 'null'),\n    boolean: (value, options) => options.stylize(String(value), 'boolean'),\n    Boolean: (value, options) => options.stylize(String(value), 'boolean'),\n    number: inspectNumber,\n    Number: inspectNumber,\n    bigint: inspectBigInt,\n    BigInt: inspectBigInt,\n    string: inspectString,\n    String: inspectString,\n    function: inspectFunction,\n    Function: inspectFunction,\n    symbol: inspectSymbol,\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: inspectSymbol,\n    Array: inspectArray,\n    Date: inspectDate,\n    Map: inspectMap,\n    Set: inspectSet,\n    RegExp: inspectRegExp,\n    Promise: inspectPromise,\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: (value, options) => options.stylize('WeakSet{…}', 'special'),\n    WeakMap: (value, options) => options.stylize('WeakMap{…}', 'special'),\n    Arguments: inspectArguments,\n    Int8Array: inspectTypedArray,\n    Uint8Array: inspectTypedArray,\n    Uint8ClampedArray: inspectTypedArray,\n    Int16Array: inspectTypedArray,\n    Uint16Array: inspectTypedArray,\n    Int32Array: inspectTypedArray,\n    Uint32Array: inspectTypedArray,\n    Float32Array: inspectTypedArray,\n    Float64Array: inspectTypedArray,\n    Generator: () => '',\n    DataView: () => '',\n    ArrayBuffer: () => '',\n    Error: inspectError,\n    HTMLCollection: inspectHTMLCollection,\n    NodeList: inspectHTMLCollection,\n};\n// eslint-disable-next-line complexity\nconst inspectCustom = (value, options, type) => {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n        return value[chaiInspect](options);\n    }\n    if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {\n        return value[nodeInspect](options.depth, options);\n    }\n    if ('inspect' in value && typeof value.inspect === 'function') {\n        return value.inspect(options.depth, options);\n    }\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n        return constructorMap.get(value.constructor)(value, options);\n    }\n    if (stringTagMap[type]) {\n        return stringTagMap[type](value, options);\n    }\n    return '';\n};\nconst toString = Object.prototype.toString;\n// eslint-disable-next-line complexity\nexport function inspect(value, opts = {}) {\n    const options = normaliseOptions(opts, inspect);\n    const { customInspect } = options;\n    let type = value === null ? 'null' : typeof value;\n    if (type === 'object') {\n        type = toString.call(value).slice(8, -1);\n    }\n    // If it is a base value that we already support, then use Loupe's inspector\n    if (type in baseTypesMap) {\n        return baseTypesMap[type](value, options);\n    }\n    // If `options.customInspect` is set to true then try to use the custom inspector\n    if (customInspect && value) {\n        const output = inspectCustom(value, options, type);\n        if (output) {\n            if (typeof output === 'string')\n                return output;\n            return inspect(output, options);\n        }\n    }\n    const proto = value ? Object.getPrototypeOf(value) : false;\n    // If it's a plain Object then use Loupe's inspector\n    if (proto === Object.prototype || proto === null) {\n        return inspectObject(value, options);\n    }\n    // Specifically account for HTMLElements\n    // @ts-ignore\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n        return inspectHTMLElement(value, options);\n    }\n    if ('constructor' in value) {\n        // If it is a class, inspect it like an object but add the constructor name\n        if (value.constructor !== Object) {\n            return inspectClass(value, options);\n        }\n        // If it is an object with an anonymous prototype, display it as an object.\n        return inspectObject(value, options);\n    }\n    // last chance to check if it's an object\n    if (value === Object(value)) {\n        return inspectObject(value, options);\n    }\n    // We have run out of options! Just stringify the value\n    return options.stylize(String(value), type);\n}\nexport function registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n        return false;\n    }\n    constructorMap.set(constructor, inspector);\n    return true;\n}\nexport function registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n        return false;\n    }\n    stringTagMap[stringTag] = inspector;\n    return true;\n}\nexport const custom = chaiInspect;\nexport default inspect;\n","export const config = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {boolean}\n   * @public\n   */\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {boolean}\n   * @public\n   */\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {number}\n   * @public\n   */\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {boolean}\n   * @public\n   */\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @public\n   */\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON'],\n\n  /**\n   * ### config.deepEqual\n   *\n   * User configurable property, defines which a custom function to use for deepEqual\n   * comparisons.\n   * By default, the function used is the one from the `deep-eql` package without custom comparator.\n   *\n   *     // use a custom comparator\n   *     chai.config.deepEqual = (expected, actual) => {\n   *         return chai.util.eql(expected, actual, {\n   *             comparator: (expected, actual) => {\n   *                 // for non number comparison, use the default behavior\n   *                 if(typeof expected !== 'number') return null;\n   *                 // allow a difference of 10 between compared numbers\n   *                 return typeof actual === 'number' && Math.abs(actual - expected) < 10\n   *             }\n   *         })\n   *     };\n   *\n   * @param {Function}\n   * @public\n   */\n  deepEqual: null\n\n};\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nimport {inspect as _inspect} from 'loupe';\nimport {config} from '../config.js';\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {object} obj The object to print out.\n * @param {boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {number} depth Depth in which to descend in object. Default is 2.\n * @param {boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @returns {string}\n * @namespace Utils\n * @name inspect\n */\nexport function inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === 'undefined' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return _inspect(obj, options);\n}\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {inspect} from './inspect.js';\nimport {config} from '../config.js';\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {unknown} obj javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @namespace Utils\n * @public\n */\nexport function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n}\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {flag} from './flag.js';\nimport {getActual} from './getActual.js';\nimport {objDisplay} from './objDisplay.js';\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @namespace Utils\n * @name getMessage\n * @public\n */\nexport function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n}\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {import('../assertion.js').Assertion} assertion the assertion to transfer the flags from\n * @param {object} object the object to transfer the flags to; usually a new assertion\n * @param {boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @private\n */\nexport function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n}\n","/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nfunction type(obj) {\n  if (typeof obj === 'undefined') {\n    return 'undefined';\n  }\n\n  if (obj === null) {\n    return 'null';\n  }\n\n  const stringTag = obj[Symbol.toStringTag];\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n  const sliceStart = 8;\n  const sliceEnd = -1;\n  return Object.prototype.toString.call(obj).slice(sliceStart, sliceEnd);\n}\n\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function get(key) {\n    return key[this._key];\n  },\n  set: function set(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nexport var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nexport default deepEqual;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n      return leftHandOperand === rightHandOperand;\n    case 'Error':\n      return keysEqual(leftHandOperand, rightHandOperand, [ 'name', 'message', 'code' ], options);\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Temporal.PlainDate':\n    case 'Temporal.PlainTime':\n    case 'Temporal.PlainDateTime':\n    case 'Temporal.Instant':\n    case 'Temporal.ZonedDateTime':\n    case 'Temporal.PlainYearMonth':\n    case 'Temporal.PlainMonthDay':\n      return leftHandOperand.equals(rightHandOperand);\n    case 'Temporal.Duration':\n      return leftHandOperand.total('nanoseconds') === rightHandOperand.total('nanoseconds');\n    case 'Temporal.TimeZone':\n    case 'Temporal.Calendar':\n      return leftHandOperand.toString() === rightHandOperand.toString();\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  try {\n    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n    if (leftHandOperand.size !== rightHandOperand.size) {\n      return false;\n    }\n    if (leftHandOperand.size === 0) {\n      return true;\n    }\n  } catch (sizeError) {\n    // things that aren't actual Maps or Sets will throw here\n    return false;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\nfunction getEnumerableSymbols(target) {\n  var keys = [];\n  var allKeys = Object.getOwnPropertySymbols(target);\n  for (var i = 0; i < allKeys.length; i += 1) {\n    var key = allKeys[i];\n    if (Object.getOwnPropertyDescriptor(target, key).enumerable) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  var leftHandSymbols = getEnumerableSymbols(leftHandOperand);\n  var rightHandSymbols = getEnumerableSymbols(rightHandOperand);\n  leftHandKeys = leftHandKeys.concat(leftHandSymbols);\n  rightHandKeys = rightHandKeys.concat(rightHandSymbols);\n\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    if (iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\nfunction mapSymbols(arr) {\n  return arr.map(function mapSymbol(entry) {\n    if (typeof entry === 'symbol') {\n      return entry.toString();\n    }\n\n    return entry;\n  });\n}\n","/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nexport function hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  const str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  const parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map((value) => {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    const regexp = /^\\[(\\d+)\\]$/;\n    const mArr = regexp.exec(value);\n    let parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  let temporaryValue = obj;\n  let res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (let i = 0; i < pathDepth; i++) {\n    const part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  let tempObj = obj;\n  const pathDepth = parsed.length;\n  let part = null;\n  // Here we iterate through every part of the path\n  for (let i = 0; i < pathDepth; i++) {\n    let propName = null;\n    let propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      const next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nexport function getPathInfo(obj, path) {\n  const parsed = parsePath(path);\n  const last = parsed[parsed.length - 1];\n  const info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nexport function getPathValue(obj, path) {\n  const info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nexport function setPathValue(obj, path, val) {\n  const parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {config} from './config.js';\nimport {AssertionError} from 'assertion-error';\nimport * as util from './utils/index.js';\n\n/**\n * Assertion Constructor\n *\n * Creates object for chaining.\n *\n * `Assertion` objects contain metadata in the form of flags. Three flags can\n * be assigned during instantiation by passing arguments to this constructor:\n *\n * - `object`: This flag contains the target of the assertion. For example, in\n * the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n * contain `numKittens` so that the `equal` assertion can reference it when\n * needed.\n *\n * - `message`: This flag contains an optional custom error message to be\n * prepended to the error message that's generated by the assertion when it\n * fails.\n *\n * - `ssfi`: This flag stands for \"start stack function indicator\". It\n * contains a function reference that serves as the starting point for\n * removing frames from the stack trace of the error that's created by the\n * assertion when it fails. The goal is to provide a cleaner stack trace to\n * end users by removing Chai's internal functions. Note that it only works\n * in environments that support `Error.captureStackTrace`, and only when\n * `Chai.config.includeStack` hasn't been set to `false`.\n *\n * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n * should retain its current value, even as assertions are chained off of\n * this object. This is usually set to `true` when creating a new assertion\n * from within another assertion. It's also temporarily set to `true` before\n * an overwritten assertion gets called by the overwriting assertion.\n *\n * - `eql`: This flag contains the deepEqual function to be used by the assertion.\n *\n * @param {unknown} obj target of the assertion\n * @param {string} msg (optional) custom error message\n * @param {Function} ssfi (optional) starting point for removing stack frames\n * @param {boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n * @returns {unknown}\n * @private\n */\nexport function Assertion (obj, msg, ssfi, lockSsfi) {\n  util.flag(this, 'ssfi', ssfi || Assertion);\n  util.flag(this, 'lockSsfi', lockSsfi);\n  util.flag(this, 'object', obj);\n  util.flag(this, 'message', msg);\n  util.flag(this, 'eql', config.deepEqual || util.eql);\n\n  return util.proxify(this);\n}\n\nObject.defineProperty(Assertion, 'includeStack', {\n  get: function() {\n    console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n    return config.includeStack;\n  },\n  set: function(value) {\n    console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n    config.includeStack = value;\n  }\n});\n\nObject.defineProperty(Assertion, 'showDiff', {\n  get: function() {\n    console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n    return config.showDiff;\n  },\n  set: function(value) {\n    console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n    config.showDiff = value;\n  }\n});\n\nAssertion.addProperty = function (name, fn) {\n  util.addProperty(this.prototype, name, fn);\n};\n\nAssertion.addMethod = function (name, fn) {\n  util.addMethod(this.prototype, name, fn);\n};\n\nAssertion.addChainableMethod = function (name, fn, chainingBehavior) {\n  util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n};\n\nAssertion.overwriteProperty = function (name, fn) {\n  util.overwriteProperty(this.prototype, name, fn);\n};\n\nAssertion.overwriteMethod = function (name, fn) {\n  util.overwriteMethod(this.prototype, name, fn);\n};\n\nAssertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n  util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n};\n\n/**\n * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n *\n * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n *\n * @name assert\n * @param {unknown} expression to be tested\n * @param {string | Function} message or function that returns message to display if expression fails\n * @param {string | Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n * @param {unknown} expected value (remember to check for negation)\n * @param {unknown} actual (optional) will default to `this.obj`\n * @param {boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n * @private\n */\n\nAssertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n  var ok = util.test(this, arguments);\n  if (false !== showDiff) showDiff = true;\n  if (undefined === expected && undefined === _actual) showDiff = false;\n  if (true !== config.showDiff) showDiff = false;\n\n  if (!ok) {\n    msg = util.getMessage(this, arguments);\n    var actual = util.getActual(this, arguments);\n    var assertionErrorObjectProperties = {\n        actual: actual\n      , expected: expected\n      , showDiff: showDiff\n    };\n\n    var operator = util.getOperator(this, arguments);\n    if (operator) {\n      assertionErrorObjectProperties.operator = operator;\n    }\n\n    throw new AssertionError(\n      msg,\n      assertionErrorObjectProperties,\n      (config.includeStack) ? this.assert : util.flag(this, 'ssfi'));\n  }\n};\n\n/**\n * ### ._obj\n *\n * Quick reference to stored `actual` value for plugin developers.\n *\n * @private\n */\nObject.defineProperty(Assertion.prototype, '_obj',\n  { get: function () {\n      return util.flag(this, 'object');\n    }\n  , set: function (val) {\n      util.flag(this, 'object', val);\n    }\n});\n","import {config} from '../config.js';\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n * @returns {boolean}\n */\nexport function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n}\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {Assertion} from '../assertion.js';\nimport {flag} from './flag.js';\nimport {isProxyEnabled} from './isProxyEnabled.js';\nimport {transferFlags} from './transferFlags.js';\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {object} ctx object to which the property is added\n * @param {string} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @public\n */\nexport function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n}\n","const fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {string} assertionName\n * @param {boolean} isChainable\n * @returns {unknown}\n * @namespace Utils\n * @name addLengthGuard\n */\nexport function addLengthGuard(fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n}\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @public\n */\nexport function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  /**\n   * @param {unknown} property\n   */\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n}\n","import {config} from '../config.js';\nimport {flag} from './flag.js';\nimport {getProperties} from './getProperties.js';\nimport {isProxyEnabled} from './isProxyEnabled.js';\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nconst builtins = ['__flags', '__methods', '_obj', 'assert'];\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {object} obj\n * @param {string} nonChainableMethodName\n * @returns {unknown}\n * @namespace Utils\n * @name proxify\n */\nexport function proxify(obj ,nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n}\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n *\n * @param {string} strA\n * @param {string} strB\n * @param {number} cap\n * @returns {number} min(string distance between strA and strB, cap)\n * @private\n */\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {addLengthGuard} from './addLengthGuard.js';\nimport {flag} from './flag.js';\nimport {proxify} from './proxify.js';\nimport {transferFlags} from './transferFlags.js';\nimport {Assertion} from '../assertion.js';\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {object} ctx object to which the method is added\n * @param {string} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @public\n */\nexport function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n}\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {Assertion} from '../assertion.js';\nimport {flag} from './flag.js';\nimport {isProxyEnabled} from './isProxyEnabled.js';\nimport {transferFlags} from './transferFlags.js';\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *         return function () {\n *             var obj = utils.flag(this, 'object');\n *             if (obj instanceof Foo) {\n *                 new chai.Assertion(obj.name).to.equal('bar');\n *             } else {\n *                 _super.call(this);\n *             }\n *         }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {object} ctx object whose property is to be overwritten\n * @param {string} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @public\n */\nexport function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n}\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {Assertion} from '../assertion.js';\nimport {addLengthGuard} from './addLengthGuard.js';\nimport {flag} from './flag.js';\nimport {proxify} from './proxify.js';\nimport {transferFlags} from './transferFlags.js';\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *         return function (str) {\n *             var obj = utils.flag(this, 'object');\n *             if (obj instanceof Foo) {\n *                 new chai.Assertion(obj.value).to.equal(str);\n *             } else {\n *                 _super.apply(this, arguments);\n *             }\n *         }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {object} ctx object whose method is to be overwritten\n * @param {string} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @public\n */\nexport function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n}\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {Assertion} from '../assertion.js';\nimport {addLengthGuard} from './addLengthGuard.js';\nimport {flag} from './flag.js';\nimport {proxify} from './proxify.js';\nimport {transferFlags} from './transferFlags.js';\n\n/**\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {object} ctx object to which the method is added\n * @param {string} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @public\n */\nexport function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n}\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {Assertion} from '../assertion.js';\nimport {transferFlags} from './transferFlags.js';\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *         function (_super) {\n *         }\n *         , function (_super) {\n *         }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {object} ctx object whose method / property is to be overwritten\n * @param {string} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @public\n */\nexport function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n}\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {inspect} from './inspect.js';\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {unknown} a first element to compare\n * @param {unknown} b second element to compare\n * @returns {number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @public\n */\nexport function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n}\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {object} obj\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @public\n */\nexport function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n}\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {getOwnEnumerablePropertySymbols} from './getOwnEnumerablePropertySymbols.js';\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {object} obj\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @public\n */\nexport function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n}\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {unknown} value The value which has to be checked if it is NaN\n * @returns {boolean}\n * @name isNaN\n * @private\n */\nfunction _isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nexport const isNaN = Number.isNaN || _isNaN;\n","import {flag} from './flag.js';\nimport {type} from './type-detect.js';\n\n/**\n * @param {unknown} obj\n * @returns {boolean}\n */\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'Function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @namespace Utils\n * @name getOperator\n * @public\n */\nexport function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n}\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport {Assertion} from '../assertion.js';\nimport {AssertionError} from 'assertion-error';\nimport * as _ from '../utils/index.js';\n\nconst {flag} = _;\n\n/**\n * ### Language Chains\n *\n * The following are provided as chainable getters to improve the readability\n * of your assertions.\n *\n * **Chains**\n *\n * - to\n * - be\n * - been\n * - is\n * - that\n * - which\n * - and\n * - has\n * - have\n * - with\n * - at\n * - of\n * - same\n * - but\n * - does\n * - still\n * - also\n *\n * @name language chains\n * @namespace BDD\n * @public\n */\n\n[ 'to', 'be', 'been', 'is'\n, 'and', 'has', 'have', 'with'\n, 'that', 'which', 'at', 'of'\n, 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n  Assertion.addProperty(chain);\n});\n\n/**\n * ### .not\n *\n * Negates all assertions that follow in the chain.\n *\n *     expect(function () {}).to.not.throw();\n *     expect({a: 1}).to.not.have.property('b');\n *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n *\n * Just because you can negate any assertion with `.not` doesn't mean you\n * should. With great power comes great responsibility. It's often best to\n * assert that the one expected output was produced, rather than asserting\n * that one of countless unexpected outputs wasn't produced. See individual\n * assertions for specific guidance.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.equal(1); // Not recommended\n *\n * @name not\n * @namespace BDD\n * @public\n */\n\nAssertion.addProperty('not', function () {\n  flag(this, 'negate', true);\n});\n\n/**\n * ### .deep\n *\n * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n * assertions that follow in the chain to use deep equality instead of strict\n * (`===`) equality. See the `deep-eql` project page for info on the deep\n * equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) equals `{a: 1}`\n *     expect({a: 1}).to.deep.equal({a: 1});\n *     expect({a: 1}).to.not.equal({a: 1});\n *\n *     // Target array deeply (but not strictly) includes `{a: 1}`\n *     expect([{a: 1}]).to.deep.include({a: 1});\n *     expect([{a: 1}]).to.not.include({a: 1});\n *\n *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n *\n *     // Target array deeply (but not strictly) has member `{a: 1}`\n *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n *\n *     // Target set deeply (but not strictly) has key `{a: 1}`\n *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n *\n *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n *\n * @name deep\n * @namespace BDD\n * @public\n */\n\nAssertion.addProperty('deep', function () {\n  flag(this, 'deep', true);\n});\n\n/**\n * ### .nested\n *\n * Enables dot- and bracket-notation in all `.property` and `.include`\n * assertions that follow in the chain.\n *\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n *\n * `.nested` cannot be combined with `.own`.\n *\n * @name nested\n * @namespace BDD\n * @public\n */\n\nAssertion.addProperty('nested', function () {\n  flag(this, 'nested', true);\n});\n\n/**\n * ### .own\n *\n * Causes all `.property` and `.include` assertions that follow in the chain\n * to ignore inherited properties.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.have.own.property('a');\n *     expect({a: 1}).to.have.property('b');\n *     expect({a: 1}).to.not.have.own.property('b');\n *\n *     expect({a: 1}).to.own.include({a: 1});\n *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n *\n * `.own` cannot be combined with `.nested`.\n *\n * @name own\n * @namespace BDD\n * @public\n */\n\nAssertion.addProperty('own', function () {\n  flag(this, 'own', true);\n});\n\n/**\n * ### .ordered\n *\n * Causes all `.members` assertions that follow in the chain to require that\n * members be in the same order.\n *\n *     expect([1, 2]).to.have.ordered.members([1, 2])\n *       .but.not.have.ordered.members([2, 1]);\n *\n * When `.include` and `.ordered` are combined, the ordering begins at the\n * start of both arrays.\n *\n *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n *       .but.not.include.ordered.members([2, 3]);\n *\n * @name ordered\n * @namespace BDD\n * @public\n */\n\nAssertion.addProperty('ordered', function () {\n  flag(this, 'ordered', true);\n});\n\n/**\n * ### .any\n *\n * Causes all `.keys` assertions that follow in the chain to only require that\n * the target have at least one of the given keys. This is the opposite of\n * `.all`, which requires that the target have all of the given keys.\n *\n *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n *\n * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n *\n * @name any\n * @namespace BDD\n * @public\n */\n\nAssertion.addProperty('any', function () {\n  flag(this, 'any', true);\n  flag(this, 'all', false);\n});\n\n/**\n * ### .all\n *\n * Causes all `.keys` assertions that follow in the chain to require that the\n * target have all of the given keys. This is the opposite of `.any`, which\n * only requires that the target have at least one of the given keys.\n *\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *\n * Note that `.all` is used by default when neither `.all` nor `.any` are\n * added earlier in the chain. However, it's often best to add `.all` anyway\n * because it improves readability.\n *\n * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n *\n * @name all\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('all', function () {\n  flag(this, 'all', true);\n  flag(this, 'any', false);\n});\n\nconst functionTypes = {\n  'function': ['function', 'asyncfunction', 'generatorfunction', 'asyncgeneratorfunction'],\n  'asyncfunction': ['asyncfunction', 'asyncgeneratorfunction'],\n  'generatorfunction': ['generatorfunction', 'asyncgeneratorfunction'],\n  'asyncgeneratorfunction': ['asyncgeneratorfunction']\n}\n\n/**\n * ### .a(type[, msg])\n *\n * Asserts that the target's type is equal to the given string `type`. Types\n * are case insensitive. See the utility file `./type-detect.js` for info on the\n * type detection algorithm.\n *\n *     expect('foo').to.be.a('string');\n *     expect({a: 1}).to.be.an('object');\n *     expect(null).to.be.a('null');\n *     expect(undefined).to.be.an('undefined');\n *     expect(new Error).to.be.an('error');\n *     expect(Promise.resolve()).to.be.a('promise');\n *     expect(new Float32Array).to.be.a('float32array');\n *     expect(Symbol()).to.be.a('symbol');\n *\n * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n *\n *     var myObj = {\n *         [Symbol.toStringTag]: 'myCustomType'\n *     };\n *\n *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n *\n * It's often best to use `.a` to check a target's type before making more\n * assertions on the same target. That way, you avoid unexpected behavior from\n * any assertion that does different things based on the target's type.\n *\n *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n *     expect([]).to.be.an('array').that.is.empty;\n *\n * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n * assert that the target is the expected type, rather than asserting that it\n * isn't one of many unexpected types.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.an('array'); // Not recommended\n *\n * `.a` accepts an optional `msg` argument which is a custom error message to\n * show when the assertion fails. The message can also be given as the second\n * argument to `expect`.\n *\n *     expect(1).to.be.a('string', 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.a('string');\n *\n * `.a` can also be used as a language chain to improve the readability of\n * your assertions.\n *\n *     expect({b: 2}).to.have.a.property('b');\n *\n * The alias `.an` can be used interchangeably with `.a`.\n *\n * @name a\n * @alias an\n * @param {string} type\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction an (type, msg) {\n  if (msg) flag(this, 'message', msg);\n  type = type.toLowerCase();\n  var obj = flag(this, 'object')\n    , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n  const detectedType = _.type(obj).toLowerCase();\n\n  if (functionTypes['function'].includes(type)) {\n    this.assert(\n        functionTypes[type].includes(detectedType)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  } else {\n    this.assert(\n      type === detectedType\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n}\n\nAssertion.addChainableMethod('an', an);\nAssertion.addChainableMethod('a', an);\n\n/**\n *\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nfunction SameValueZero(a, b) {\n  return (_.isNaN(a) && _.isNaN(b)) || a === b;\n}\n\n/**\n *\n */\nfunction includeChainingBehavior () {\n  flag(this, 'contains', true);\n}\n\n/**\n * ### .include(val[, msg])\n *\n * When the target is a string, `.include` asserts that the given string `val`\n * is a substring of the target.\n *\n *     expect('foobar').to.include('foo');\n *\n * When the target is an array, `.include` asserts that the given `val` is a\n * member of the target.\n *\n *     expect([1, 2, 3]).to.include(2);\n *\n * When the target is an object, `.include` asserts that the given object\n * `val`'s properties are a subset of the target's properties.\n *\n *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n *\n * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n * member of the target. SameValueZero equality algorithm is used.\n *\n *     expect(new Set([1, 2])).to.include(2);\n *\n * When the target is a Map, `.include` asserts that the given `val` is one of\n * the values of the target. SameValueZero equality algorithm is used.\n *\n *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n *\n * Because `.include` does different things based on the target's type, it's\n * important to check the target's type before using `.include`. See the `.a`\n * doc for info on testing a target's type.\n *\n *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n *\n * By default, strict (`===`) equality is used to compare array members and\n * object properties. Add `.deep` earlier in the chain to use deep equality\n * instead (WeakSet targets are not supported). See the `deep-eql` project\n * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target array deeply (but not strictly) includes `{a: 1}`\n *     expect([{a: 1}]).to.deep.include({a: 1});\n *     expect([{a: 1}]).to.not.include({a: 1});\n *\n *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n *\n * By default, all of the target's properties are searched when working with\n * objects. This includes properties that are inherited and/or non-enumerable.\n * Add `.own` earlier in the chain to exclude the target's inherited\n * properties from the search.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.own.include({a: 1});\n *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n *\n * Note that a target object is always only searched for `val`'s own\n * enumerable properties.\n *\n * `.deep` and `.own` can be combined.\n *\n *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n *\n * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n * referencing nested properties.\n *\n *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n *\n * `.deep` and `.nested` can be combined.\n *\n *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n *\n * `.own` and `.nested` cannot be combined.\n *\n * Add `.not` earlier in the chain to negate `.include`.\n *\n *     expect('foobar').to.not.include('taco');\n *     expect([1, 2, 3]).to.not.include(4);\n *\n * However, it's dangerous to negate `.include` when the target is an object.\n * The problem is that it creates uncertain expectations by asserting that the\n * target object doesn't have all of `val`'s key/value pairs but may or may\n * not have some of them. It's often best to identify the exact output that's\n * expected, and then write an assertion that only accepts that exact output.\n *\n * When the target object isn't even expected to have `val`'s keys, it's\n * often best to assert exactly that.\n *\n *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n *\n * When the target object is expected to have `val`'s keys, it's often best to\n * assert that each of the properties has its expected value, rather than\n * asserting that each property doesn't have one of many unexpected values.\n *\n *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n *\n * `.include` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n *\n * `.include` can also be used as a language chain, causing all `.members` and\n * `.keys` assertions that follow in the chain to require the target to be a\n * superset of the expected set, rather than an identical set. Note that\n * `.members` ignores duplicates in the subset when `.include` is added.\n *\n *     // Target object's keys are a superset of ['a', 'b'] but not identical\n *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n *\n *     // Target array is a superset of [1, 2] but not identical\n *     expect([1, 2, 3]).to.include.members([1, 2]);\n *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n *\n *     // Duplicates in the subset are ignored\n *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n *\n * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n * to ignore `.include`.\n *\n *     // Both assertions are identical\n *     expect({a: 1}).to.include.any.keys('a', 'b');\n *     expect({a: 1}).to.have.any.keys('a', 'b');\n *\n * The aliases `.includes`, `.contain`, and `.contains` can be used\n * interchangeably with `.include`.\n *\n * @name include\n * @alias contain\n * @alias includes\n * @alias contains\n * @param {unknown} val\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction include (val, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  var obj = flag(this, 'object')\n    , objType = _.type(obj).toLowerCase()\n    , flagMsg = flag(this, 'message')\n    , negate = flag(this, 'negate')\n    , ssfi = flag(this, 'ssfi')\n    , isDeep = flag(this, 'deep')\n    , descriptor = isDeep ? 'deep ' : ''\n    , isEql = isDeep ? flag(this, 'eql') : SameValueZero;\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  var included = false;\n\n  switch (objType) {\n    case 'string':\n      included = obj.indexOf(val) !== -1;\n      break;\n\n    case 'weakset':\n      if (isDeep) {\n        throw new AssertionError(\n          flagMsg + 'unable to use .deep.include with WeakSet',\n          undefined,\n          ssfi\n        );\n      }\n\n      included = obj.has(val);\n      break;\n\n    case 'map':\n      obj.forEach(function (item) {\n        included = included || isEql(item, val);\n      });\n      break;\n\n    case 'set':\n      if (isDeep) {\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n      } else {\n        included = obj.has(val);\n      }\n      break;\n\n    case 'array':\n      if (isDeep) {\n        included = obj.some(function (item) {\n          return isEql(item, val);\n        })\n      } else {\n        included = obj.indexOf(val) !== -1;\n      }\n      break;\n\n    default:\n      // This block is for asserting a subset of properties in an object.\n      // `_.expectTypes` isn't used here because `.include` should work with\n      // objects with a custom `@@toStringTag`.\n      if (val !== Object(val)) {\n        throw new AssertionError(\n          flagMsg + 'the given combination of arguments ('\n          + objType + ' and '\n          + _.type(val).toLowerCase() + ')'\n          + ' is invalid for this assertion. '\n          + 'You can use an array, a map, an object, a set, a string, '\n          + 'or a weakset instead of a '\n          + _.type(val).toLowerCase(),\n          undefined,\n          ssfi\n        );\n      }\n\n      var props = Object.keys(val)\n        , firstErr = null\n        , numErrs = 0;\n\n      props.forEach(function (prop) {\n        var propAssertion = new Assertion(obj);\n        _.transferFlags(this, propAssertion, true);\n        flag(propAssertion, 'lockSsfi', true);\n\n        if (!negate || props.length === 1) {\n          propAssertion.property(prop, val[prop]);\n          return;\n        }\n\n        try {\n          propAssertion.property(prop, val[prop]);\n        } catch (err) {\n          if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n            throw err;\n          }\n          if (firstErr === null) firstErr = err;\n          numErrs++;\n        }\n      }, this);\n\n      // When validating .not.include with multiple properties, we only want\n      // to throw an assertion error if all of the properties are included,\n      // in which case we throw the first property assertion error that we\n      // encountered.\n      if (negate && props.length > 1 && numErrs === props.length) {\n        throw firstErr;\n      }\n      return;\n  }\n\n  // Assert inclusion in collection or substring in a string.\n  this.assert(\n    included\n    , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n    , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n}\n\nAssertion.addChainableMethod('include', include, includeChainingBehavior);\nAssertion.addChainableMethod('contain', include, includeChainingBehavior);\nAssertion.addChainableMethod('contains', include, includeChainingBehavior);\nAssertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n/**\n * ### .ok\n *\n * Asserts that the target is a truthy value (considered `true` in boolean context).\n * However, it's often best to assert that the target is strictly (`===`) or\n * deeply equal to its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.ok; // Not recommended\n *\n *     expect(true).to.be.true; // Recommended\n *     expect(true).to.be.ok; // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.ok`.\n *\n *     expect(0).to.equal(0); // Recommended\n *     expect(0).to.not.be.ok; // Not recommended\n *\n *     expect(false).to.be.false; // Recommended\n *     expect(false).to.not.be.ok; // Not recommended\n *\n *     expect(null).to.be.null; // Recommended\n *     expect(null).to.not.be.ok; // Not recommended\n *\n *     expect(undefined).to.be.undefined; // Recommended\n *     expect(undefined).to.not.be.ok; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(false, 'nooo why fail??').to.be.ok;\n *\n * @name ok\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('ok', function () {\n  this.assert(\n      flag(this, 'object')\n    , 'expected #{this} to be truthy'\n    , 'expected #{this} to be falsy');\n});\n\n/**\n * ### .true\n *\n * Asserts that the target is strictly (`===`) equal to `true`.\n *\n *     expect(true).to.be.true;\n *\n * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `true`.\n *\n *     expect(false).to.be.false; // Recommended\n *     expect(false).to.not.be.true; // Not recommended\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.true; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(false, 'nooo why fail??').to.be.true;\n *\n * @name true\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('true', function () {\n  this.assert(\n      true === flag(this, 'object')\n    , 'expected #{this} to be true'\n    , 'expected #{this} to be false'\n    , flag(this, 'negate') ? false : true\n  );\n});\n\nAssertion.addProperty('numeric', function () {\n  const object = flag(this, 'object');\n\n  this.assert(\n      ['Number', 'BigInt'].includes(_.type(object))\n    , 'expected #{this} to be numeric'\n    , 'expected #{this} to not be numeric'\n    , flag(this, 'negate') ? false : true\n  );\n});\n\n/**\n * ### .callable\n *\n * Asserts that the target a callable function.\n *\n *     expect(console.log).to.be.callable;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect('not a function', 'nooo why fail??').to.be.callable;\n *\n * @name callable\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('callable', function () {\n  const val = flag(this, 'object')\n  const ssfi = flag(this, 'ssfi')\n  const message = flag(this, 'message')\n  const msg = message ? `${message}: ` : ''\n  const negate = flag(this, 'negate');\n\n  const assertionMessage = negate ?\n    `${msg}expected ${_.inspect(val)} not to be a callable function` : \n    `${msg}expected ${_.inspect(val)} to be a callable function`;\n\n  const isCallable = ['Function', 'AsyncFunction', 'GeneratorFunction', 'AsyncGeneratorFunction'].includes(_.type(val));\n\n  if ((isCallable && negate) || (!isCallable && !negate)) {\n    throw new AssertionError(\n      assertionMessage,\n      undefined,\n      ssfi\n    );\n  }\n});\n\n/**\n * ### .false\n *\n * Asserts that the target is strictly (`===`) equal to `false`.\n *\n *     expect(false).to.be.false;\n *\n * Add `.not` earlier in the chain to negate `.false`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to `false`.\n *\n *     expect(true).to.be.true; // Recommended\n *     expect(true).to.not.be.false; // Not recommended\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.false; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(true, 'nooo why fail??').to.be.false;\n *\n * @name false\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('false', function () {\n  this.assert(\n      false === flag(this, 'object')\n    , 'expected #{this} to be false'\n    , 'expected #{this} to be true'\n    , flag(this, 'negate') ? true : false\n  );\n});\n\n/**\n * ### .null\n *\n * Asserts that the target is strictly (`===`) equal to `null`.\n *\n *     expect(null).to.be.null;\n *\n * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `null`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.null; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.null;\n *\n * @name null\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('null', function () {\n  this.assert(\n      null === flag(this, 'object')\n    , 'expected #{this} to be null'\n    , 'expected #{this} not to be null'\n  );\n});\n\n/**\n * ### .undefined\n *\n * Asserts that the target is strictly (`===`) equal to `undefined`.\n *\n *     expect(undefined).to.be.undefined;\n *\n * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to `undefined`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.undefined; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.undefined;\n *\n * @name undefined\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('undefined', function () {\n  this.assert(\n      undefined === flag(this, 'object')\n    , 'expected #{this} to be undefined'\n    , 'expected #{this} not to be undefined'\n  );\n});\n\n/**\n * ### .NaN\n *\n * Asserts that the target is exactly `NaN`.\n *\n *     expect(NaN).to.be.NaN;\n *\n * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `NaN`.\n *\n *     expect('foo').to.equal('foo'); // Recommended\n *     expect('foo').to.not.be.NaN; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.NaN;\n *\n * @name NaN\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('NaN', function () {\n  this.assert(\n      _.isNaN(flag(this, 'object'))\n      , 'expected #{this} to be NaN'\n      , 'expected #{this} not to be NaN'\n  );\n});\n\n/**\n * ### .exist\n *\n * Asserts that the target is not strictly (`===`) equal to either `null` or\n * `undefined`. However, it's often best to assert that the target is equal to\n * its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.exist; // Not recommended\n *\n *     expect(0).to.equal(0); // Recommended\n *     expect(0).to.exist; // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.exist`.\n *\n *     expect(null).to.be.null; // Recommended\n *     expect(null).to.not.exist; // Not recommended\n *\n *     expect(undefined).to.be.undefined; // Recommended\n *     expect(undefined).to.not.exist; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(null, 'nooo why fail??').to.exist;\n *\n * The alias `.exists` can be used interchangeably with `.exist`.\n *\n * @name exist\n * @alias exists\n * @namespace BDD\n * @public\n */\nfunction assertExist () {\n  var val = flag(this, 'object');\n  this.assert(\n      val !== null && val !== undefined\n    , 'expected #{this} to exist'\n    , 'expected #{this} to not exist'\n  );\n}\n\nAssertion.addProperty('exist', assertExist);\nAssertion.addProperty('exists', assertExist);\n\n/**\n * ### .empty\n *\n * When the target is a string or array, `.empty` asserts that the target's\n * `length` property is strictly (`===`) equal to `0`.\n *\n *     expect([]).to.be.empty;\n *     expect('').to.be.empty;\n *\n * When the target is a map or set, `.empty` asserts that the target's `size`\n * property is strictly equal to `0`.\n *\n *     expect(new Set()).to.be.empty;\n *     expect(new Map()).to.be.empty;\n *\n * When the target is a non-function object, `.empty` asserts that the target\n * doesn't have any own enumerable properties. Properties with Symbol-based\n * keys are excluded from the count.\n *\n *     expect({}).to.be.empty;\n *\n * Because `.empty` does different things based on the target's type, it's\n * important to check the target's type before using `.empty`. See the `.a`\n * doc for info on testing a target's type.\n *\n *     expect([]).to.be.an('array').that.is.empty;\n *\n * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n * best to assert that the target contains its expected number of values,\n * rather than asserting that it's not empty.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n *\n *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n *\n *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n *     expect({a: 1}).to.not.be.empty; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n *\n * @name empty\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('empty', function () {\n  var val = flag(this, 'object')\n    , ssfi = flag(this, 'ssfi')\n    , flagMsg = flag(this, 'message')\n    , itemsCount;\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  switch (_.type(val).toLowerCase()) {\n    case 'array':\n    case 'string':\n      itemsCount = val.length;\n      break;\n    case 'map':\n    case 'set':\n      itemsCount = val.size;\n      break;\n    case 'weakmap':\n    case 'weakset':\n      throw new AssertionError(\n        flagMsg + '.empty was passed a weak collection',\n        undefined,\n        ssfi\n      );\n    case 'function':\n      var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n      throw new AssertionError(msg.trim(), undefined, ssfi);\n    default:\n      if (val !== Object(val)) {\n        throw new AssertionError(\n          flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n          undefined,\n          ssfi\n        );\n      }\n      itemsCount = Object.keys(val).length;\n  }\n\n  this.assert(\n      0 === itemsCount\n    , 'expected #{this} to be empty'\n    , 'expected #{this} not to be empty'\n  );\n});\n\n/**\n * ### .arguments\n *\n * Asserts that the target is an `arguments` object.\n *\n *     function test () {\n *         expect(arguments).to.be.arguments;\n *     }\n *\n *     test();\n *\n * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n * best to assert which type the target is expected to be, rather than\n * asserting that it’s not an `arguments` object.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.arguments; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({}, 'nooo why fail??').to.be.arguments;\n *\n * The alias `.Arguments` can be used interchangeably with `.arguments`.\n *\n * @name arguments\n * @alias Arguments\n * @namespace BDD\n * @public\n */\nfunction checkArguments () {\n  var obj = flag(this, 'object')\n    , type = _.type(obj);\n  this.assert(\n      'Arguments' === type\n    , 'expected #{this} to be arguments but got ' + type\n    , 'expected #{this} to not be arguments'\n  );\n}\n\nAssertion.addProperty('arguments', checkArguments);\nAssertion.addProperty('Arguments', checkArguments);\n\n/**\n * ### .equal(val[, msg])\n *\n * Asserts that the target is strictly (`===`) equal to the given `val`.\n *\n *     expect(1).to.equal(1);\n *     expect('foo').to.equal('foo');\n *\n * Add `.deep` earlier in the chain to use deep equality instead. See the\n * `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) equals `{a: 1}`\n *     expect({a: 1}).to.deep.equal({a: 1});\n *     expect({a: 1}).to.not.equal({a: 1});\n *\n *     // Target array deeply (but not strictly) equals `[1, 2]`\n *     expect([1, 2]).to.deep.equal([1, 2]);\n *     expect([1, 2]).to.not.equal([1, 2]);\n *\n * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to one of countless unexpected values.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.equal(2); // Not recommended\n *\n * `.equal` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.equal(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.equal(2);\n *\n * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n *\n * @name equal\n * @alias equals\n * @alias eq\n * @param {unknown} val\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertEqual (val, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  if (flag(this, 'deep')) {\n    var prevLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    this.eql(val);\n    flag(this, 'lockSsfi', prevLockSsfi);\n  } else {\n    this.assert(\n        val === obj\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{exp}'\n      , val\n      , this._obj\n      , true\n    );\n  }\n}\n\nAssertion.addMethod('equal', assertEqual);\nAssertion.addMethod('equals', assertEqual);\nAssertion.addMethod('eq', assertEqual);\n\n/**\n * ### .eql(obj[, msg])\n *\n * Asserts that the target is deeply equal to the given `obj`. See the\n * `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target object is deeply (but not strictly) equal to {a: 1}\n *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n *\n *     // Target array is deeply (but not strictly) equal to [1, 2]\n *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n *\n * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n * to assert that the target is deeply equal to its expected value, rather\n * than not deeply equal to one of countless unexpected values.\n *\n *     expect({a: 1}).to.eql({a: 1}); // Recommended\n *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n *\n * `.eql` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n *\n * The alias `.eqls` can be used interchangeably with `.eql`.\n *\n * The `.deep.equal` assertion is almost identical to `.eql` but with one\n * difference: `.deep.equal` causes deep equality comparisons to also be used\n * for any other assertions that follow in the chain.\n *\n * @name eql\n * @alias eqls\n * @param {unknown} obj\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertEql(obj, msg) {\n  if (msg) flag(this, 'message', msg);\n  var eql = flag(this, 'eql');\n  this.assert(\n      eql(obj, flag(this, 'object'))\n    , 'expected #{this} to deeply equal #{exp}'\n    , 'expected #{this} to not deeply equal #{exp}'\n    , obj\n    , this._obj\n    , true\n  );\n}\n\nAssertion.addMethod('eql', assertEql);\nAssertion.addMethod('eqls', assertEql);\n\n/**\n * ### .above(n[, msg])\n *\n * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.above(1); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.above`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(1).to.not.be.above(2); // Not recommended\n *\n * `.above` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.above(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.above(2);\n *\n * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n * `.above`.\n *\n * @name above\n * @alias gt\n * @alias greaterThan\n * @param {number} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertAbove (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , doLength = flag(this, 'doLength')\n    , flagMsg = flag(this, 'message')\n    , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n    , ssfi = flag(this, 'ssfi')\n    , objType = _.type(obj).toLowerCase()\n    , nType = _.type(n).toLowerCase();\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && (objType === 'date' && nType !== 'date')) {\n    throw new AssertionError(msgPrefix + 'the argument to above must be a date', undefined, ssfi);\n  } else if (!_.isNumeric(n) && (doLength || _.isNumeric(obj))) {\n    throw new AssertionError(msgPrefix + 'the argument to above must be a number', undefined, ssfi);\n  } else if (!doLength && (objType !== 'date' && !_.isNumeric(obj))) {\n    var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n    throw new AssertionError(msgPrefix + 'expected ' + printObj + ' to be a number or a date', undefined, ssfi);\n  }\n\n  if (doLength) {\n    var descriptor = 'length'\n      , itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n        itemsCount > n\n      , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n      , n\n      , itemsCount\n    );\n  } else {\n    this.assert(\n        obj > n\n      , 'expected #{this} to be above #{exp}'\n      , 'expected #{this} to be at most #{exp}'\n      , n\n    );\n  }\n}\n\nAssertion.addMethod('above', assertAbove);\nAssertion.addMethod('gt', assertAbove);\nAssertion.addMethod('greaterThan', assertAbove);\n\n/**\n * ### .least(n[, msg])\n *\n * Asserts that the target is a number or a date greater than or equal to the given\n * number or date `n` respectively. However, it's often best to assert that the target is equal to\n * its expected value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.at.least(1); // Not recommended\n *     expect(2).to.be.at.least(2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than or equal to the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.least`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.at.least(2); // Not recommended\n *\n * `.least` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.at.least(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.at.least(2);\n *\n * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n * `.least`.\n *\n * @name least\n * @alias gte\n * @alias greaterThanOrEqual\n * @param {unknown} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertLeast (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , doLength = flag(this, 'doLength')\n    , flagMsg = flag(this, 'message')\n    , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n    , ssfi = flag(this, 'ssfi')\n    , objType = _.type(obj).toLowerCase()\n    , nType = _.type(n).toLowerCase()\n    , errorMessage\n    , shouldThrow = true;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && (objType === 'date' && nType !== 'date')) {\n    errorMessage = msgPrefix + 'the argument to least must be a date';\n  } else if (!_.isNumeric(n) && (doLength || _.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the argument to least must be a number';\n  } else if (!doLength && (objType !== 'date' && !_.isNumeric(obj))) {\n    var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n    errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    var descriptor = 'length'\n      , itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n        itemsCount >= n\n      , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n      , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n      , n\n      , itemsCount\n    );\n  } else {\n    this.assert(\n        obj >= n\n      , 'expected #{this} to be at least #{exp}'\n      , 'expected #{this} to be below #{exp}'\n      , n\n    );\n  }\n}\n\nAssertion.addMethod('least', assertLeast);\nAssertion.addMethod('gte', assertLeast);\nAssertion.addMethod('greaterThanOrEqual', assertLeast);\n\n/**\n * ### .below(n[, msg])\n *\n * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.below(2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is less than the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.length(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.below`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.be.below(1); // Not recommended\n *\n * `.below` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(2).to.be.below(1, 'nooo why fail??');\n *     expect(2, 'nooo why fail??').to.be.below(1);\n *\n * The aliases `.lt` and `.lessThan` can be used interchangeably with\n * `.below`.\n *\n * @name below\n * @alias lt\n * @alias lessThan\n * @param {unknown} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertBelow (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , doLength = flag(this, 'doLength')\n    , flagMsg = flag(this, 'message')\n    , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n    , ssfi = flag(this, 'ssfi')\n    , objType = _.type(obj).toLowerCase()\n    , nType = _.type(n).toLowerCase()\n    , errorMessage\n    , shouldThrow = true;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n  \n  if (!doLength && (objType === 'date' && nType !== 'date')) {\n    errorMessage = msgPrefix + 'the argument to below must be a date';\n  } else if (!_.isNumeric(n) && (doLength || _.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the argument to below must be a number';\n  } else if (!doLength && (objType !== 'date' && !_.isNumeric(obj))) {\n    var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n    errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    var descriptor = 'length'\n      , itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n        itemsCount < n\n      , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n      , n\n      , itemsCount\n    );\n  } else {\n    this.assert(\n        obj < n\n      , 'expected #{this} to be below #{exp}'\n      , 'expected #{this} to be at least #{exp}'\n      , n\n    );\n  }\n}\n\nAssertion.addMethod('below', assertBelow);\nAssertion.addMethod('lt', assertBelow);\nAssertion.addMethod('lessThan', assertBelow);\n\n/**\n * ### .most(n[, msg])\n *\n * Asserts that the target is a number or a date less than or equal to the given number\n * or date `n` respectively. However, it's often best to assert that the target is equal to its\n * expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.at.most(2); // Not recommended\n *     expect(1).to.be.at.most(1); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is less than or equal to the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.most`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.be.at.most(1); // Not recommended\n *\n * `.most` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(2).to.be.at.most(1, 'nooo why fail??');\n *     expect(2, 'nooo why fail??').to.be.at.most(1);\n *\n * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n * `.most`.\n *\n * @name most\n * @alias lte\n * @alias lessThanOrEqual\n * @param {unknown} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertMost (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , doLength = flag(this, 'doLength')\n    , flagMsg = flag(this, 'message')\n    , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n    , ssfi = flag(this, 'ssfi')\n    , objType = _.type(obj).toLowerCase()\n    , nType = _.type(n).toLowerCase()\n    , errorMessage\n    , shouldThrow = true;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && (objType === 'date' && nType !== 'date')) {\n    errorMessage = msgPrefix + 'the argument to most must be a date';\n  } else if (!_.isNumeric(n) && (doLength || _.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the argument to most must be a number';\n  } else if (!doLength && (objType !== 'date' && !_.isNumeric(obj))) {\n    var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n    errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    var descriptor = 'length'\n      , itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n        itemsCount <= n\n      , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n      , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n      , n\n      , itemsCount\n    );\n  } else {\n    this.assert(\n        obj <= n\n      , 'expected #{this} to be at most #{exp}'\n      , 'expected #{this} to be above #{exp}'\n      , n\n    );\n  }\n}\n\nAssertion.addMethod('most', assertMost);\nAssertion.addMethod('lte', assertMost);\nAssertion.addMethod('lessThanOrEqual', assertMost);\n\n/**\n * ### .within(start, finish[, msg])\n *\n * Asserts that the target is a number or a date greater than or equal to the given\n * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.within(1, 3); // Not recommended\n *     expect(2).to.be.within(2, 3); // Not recommended\n *     expect(2).to.be.within(1, 2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than or equal to the given number `start`, and less\n * than or equal to the given number `finish`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.within`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.within(2, 4); // Not recommended\n *\n * `.within` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n *\n * @name within\n * @param {unknown} start lower bound inclusive\n * @param {unknown} finish upper bound inclusive\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nAssertion.addMethod('within', function (start, finish, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , doLength = flag(this, 'doLength')\n    , flagMsg = flag(this, 'message')\n    , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n    , ssfi = flag(this, 'ssfi')\n    , objType = _.type(obj).toLowerCase()\n    , startType = _.type(start).toLowerCase()\n    , finishType = _.type(finish).toLowerCase()\n    , errorMessage\n    , shouldThrow = true\n    , range = (startType === 'date' && finishType === 'date')\n        ? start.toISOString() + '..' + finish.toISOString()\n        : start + '..' + finish;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n    errorMessage = msgPrefix + 'the arguments to within must be dates';\n  } else if ((!_.isNumeric(start) || !_.isNumeric(finish)) && (doLength || _.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the arguments to within must be numbers';\n  } else if (!doLength && (objType !== 'date' && !_.isNumeric(obj))) {\n    var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n    errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    var descriptor = 'length'\n      , itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n        itemsCount >= start && itemsCount <= finish\n      , 'expected #{this} to have a ' + descriptor + ' within ' + range\n      , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n    );\n  } else {\n    this.assert(\n        obj >= start && obj <= finish\n      , 'expected #{this} to be within ' + range\n      , 'expected #{this} to not be within ' + range\n    );\n  }\n});\n\n/**\n * ### .instanceof(constructor[, msg])\n *\n * Asserts that the target is an instance of the given `constructor`.\n *\n *     function Cat () { }\n *\n *     expect(new Cat()).to.be.an.instanceof(Cat);\n *     expect([1, 2]).to.be.an.instanceof(Array);\n *\n * Add `.not` earlier in the chain to negate `.instanceof`.\n *\n *     expect({a: 1}).to.not.be.an.instanceof(Array);\n *\n * `.instanceof` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n *\n * Due to limitations in ES5, `.instanceof` may not always work as expected\n * when using a transpiler such as Babel or TypeScript. In particular, it may\n * produce unexpected results when subclassing built-in object such as\n * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n *\n * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n *\n * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n *\n * @name instanceof\n * @param {unknown} constructor\n * @param {string} msg _optional_\n * @alias instanceOf\n * @namespace BDD\n * @public\n */\nfunction assertInstanceOf (constructor, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  var target = flag(this, 'object')\n  var ssfi = flag(this, 'ssfi');\n  var flagMsg = flag(this, 'message');\n\n  try {\n    var isInstanceOf = target instanceof constructor;\n  } catch (err) {\n    if (err instanceof TypeError) {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n        flagMsg + 'The instanceof assertion needs a constructor but '\n          + _.type(constructor) + ' was given.',\n        undefined,\n        ssfi\n      );\n    }\n    throw err;\n  }\n\n  var name = _.getName(constructor);\n  if (name == null) {\n    name = 'an unnamed constructor';\n  }\n\n  this.assert(\n      isInstanceOf\n    , 'expected #{this} to be an instance of ' + name\n    , 'expected #{this} to not be an instance of ' + name\n  );\n};\n\nAssertion.addMethod('instanceof', assertInstanceOf);\nAssertion.addMethod('instanceOf', assertInstanceOf);\n\n/**\n * ### .property(name[, val[, msg]])\n *\n * Asserts that the target has a property with the given key `name`.\n *\n *     expect({a: 1}).to.have.property('a');\n *\n * When `val` is provided, `.property` also asserts that the property's value\n * is equal to the given `val`.\n *\n *     expect({a: 1}).to.have.property('a', 1);\n *\n * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n * chain to use deep equality instead. See the `deep-eql` project page for\n * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n *\n * The target's enumerable and non-enumerable properties are always included\n * in the search. By default, both own and inherited properties are included.\n * Add `.own` earlier in the chain to exclude inherited properties from the\n * search.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.have.own.property('a');\n *     expect({a: 1}).to.have.own.property('a', 1);\n *     expect({a: 1}).to.have.property('b');\n *     expect({a: 1}).to.not.have.own.property('b');\n *\n * `.deep` and `.own` can be combined.\n *\n *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n *\n * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n * referencing nested properties.\n *\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n *\n * `.deep` and `.nested` can be combined.\n *\n *     expect({a: {b: [{c: 3}]}})\n *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n *\n * `.own` and `.nested` cannot be combined.\n *\n * Add `.not` earlier in the chain to negate `.property`.\n *\n *     expect({a: 1}).to.not.have.property('b');\n *\n * However, it's dangerous to negate `.property` when providing `val`. The\n * problem is that it creates uncertain expectations by asserting that the\n * target either doesn't have a property with the given key `name`, or that it\n * does have a property with the given key `name` but its value isn't equal to\n * the given `val`. It's often best to identify the exact output that's\n * expected, and then write an assertion that only accepts that exact output.\n *\n * When the target isn't expected to have a property with the given key\n * `name`, it's often best to assert exactly that.\n *\n *     expect({b: 2}).to.not.have.property('a'); // Recommended\n *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n *\n * When the target is expected to have a property with the given key `name`,\n * it's often best to assert that the property has its expected value, rather\n * than asserting that it doesn't have one of many unexpected values.\n *\n *     expect({a: 3}).to.have.property('a', 3); // Recommended\n *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n *\n * `.property` changes the target of any assertions that follow in the chain\n * to be the value of the property from the original target object.\n *\n *     expect({a: 1}).to.have.property('a').that.is.a('number');\n *\n * `.property` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing `val`, only use the\n * second form.\n *\n *     // Recommended\n *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n *\n *     // Not recommended\n *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n *\n * The above assertion isn't the same thing as not providing `val`. Instead,\n * it's asserting that the target object has a `b` property that's equal to\n * `undefined`.\n *\n * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n * interchangeably with `.own.property`.\n *\n * @name property\n * @param {string} name\n * @param {unknown} val (optional)\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertProperty (name, val, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  var isNested = flag(this, 'nested')\n    , isOwn = flag(this, 'own')\n    , flagMsg = flag(this, 'message')\n    , obj = flag(this, 'object')\n    , ssfi = flag(this, 'ssfi')\n    , nameType = typeof name;\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  if (isNested) {\n    if (nameType !== 'string') {\n      throw new AssertionError(\n        flagMsg + 'the argument to property must be a string when using nested syntax',\n        undefined,\n        ssfi\n      );\n    }\n  } else {\n    if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n      throw new AssertionError(\n        flagMsg + 'the argument to property must be a string, number, or symbol',\n        undefined,\n        ssfi\n      );\n    }\n  }\n\n  if (isNested && isOwn) {\n    throw new AssertionError(\n      flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n      undefined,\n      ssfi\n    );\n  }\n\n  if (obj === null || obj === undefined) {\n    throw new AssertionError(\n      flagMsg + 'Target cannot be null or undefined.',\n      undefined,\n      ssfi\n    );\n  }\n\n  var isDeep = flag(this, 'deep')\n    , negate = flag(this, 'negate')\n    , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n    , value = isNested ? pathInfo.value : obj[name]\n    , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n  var descriptor = '';\n  if (isDeep) descriptor += 'deep ';\n  if (isOwn) descriptor += 'own ';\n  if (isNested) descriptor += 'nested ';\n  descriptor += 'property ';\n\n  var hasProperty;\n  if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n  else if (isNested) hasProperty = pathInfo.exists;\n  else hasProperty = _.hasProperty(obj, name);\n\n  // When performing a negated assertion for both name and val, merely having\n  // a property with the given name isn't enough to cause the assertion to\n  // fail. It must both have a property with the given name, and the value of\n  // that property must equal the given val. Therefore, skip this assertion in\n  // favor of the next.\n  if (!negate || arguments.length === 1) {\n    this.assert(\n        hasProperty\n      , 'expected #{this} to have ' + descriptor + _.inspect(name)\n      , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n  }\n\n  if (arguments.length > 1) {\n    this.assert(\n      hasProperty && isEql(val, value)\n      , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n      , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n      , val\n      , value\n    );\n  }\n\n  flag(this, 'object', value);\n}\n\nAssertion.addMethod('property', assertProperty);\n\n/**\n *\n * @param {unknown} name\n * @param {unknown} value\n * @param {string} msg\n */\nfunction assertOwnProperty (name, value, msg) {\n  flag(this, 'own', true);\n  assertProperty.apply(this, arguments);\n}\n\nAssertion.addMethod('ownProperty', assertOwnProperty);\nAssertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n/**\n * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n *\n * Asserts that the target has its own property descriptor with the given key\n * `name`. Enumerable and non-enumerable properties are included in the\n * search.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n *\n * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n * the property's descriptor is deeply equal to the given `descriptor`. See\n * the `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n *\n *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n *\n * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n * a `descriptor`. The problem is that it creates uncertain expectations by\n * asserting that the target either doesn't have a property descriptor with\n * the given key `name`, or that it does have a property descriptor with the\n * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n * often best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to have a property descriptor with the given\n * key `name`, it's often best to assert exactly that.\n *\n *     // Recommended\n *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n *\n *     // Not recommended\n *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * When the target is expected to have a property descriptor with the given\n * key `name`, it's often best to assert that the property has its expected\n * descriptor, rather than asserting that it doesn't have one of many\n * unexpected descriptors.\n *\n *     // Recommended\n *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 3,\n *     });\n *\n *     // Not recommended\n *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * `.ownPropertyDescriptor` changes the target of any assertions that follow\n * in the chain to be the value of the property descriptor from the original\n * target object.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n *       .that.has.property('enumerable', true);\n *\n * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n * custom error message to show when the assertion fails. The message can also\n * be given as the second argument to `expect`. When not providing\n * `descriptor`, only use the second form.\n *\n *     // Recommended\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 2,\n *     }, 'nooo why fail??');\n *\n *     // Recommended\n *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 2,\n *     });\n *\n *     // Recommended\n *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n *\n *     // Not recommended\n *     expect({a: 1})\n *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n *\n * The above assertion isn't the same thing as not providing `descriptor`.\n * Instead, it's asserting that the target object has a `b` property\n * descriptor that's deeply equal to `undefined`.\n *\n * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n * `.ownPropertyDescriptor`.\n *\n * @name ownPropertyDescriptor\n * @alias haveOwnPropertyDescriptor\n * @param {string} name\n * @param {object} descriptor _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertOwnPropertyDescriptor (name, descriptor, msg) {\n  if (typeof descriptor === 'string') {\n    msg = descriptor;\n    descriptor = null;\n  }\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n  var eql = flag(this, 'eql');\n  if (actualDescriptor && descriptor) {\n    this.assert(\n        eql(descriptor, actualDescriptor)\n      , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n      , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n      , descriptor\n      , actualDescriptor\n      , true\n    );\n  } else {\n    this.assert(\n        actualDescriptor\n      , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n      , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n    );\n  }\n  flag(this, 'object', actualDescriptor);\n}\n\nAssertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\nAssertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n/**\n *\n */\nfunction assertLengthChain () {\n  flag(this, 'doLength', true);\n}\n\n/**\n * ### .lengthOf(n[, msg])\n *\n * Asserts that the target's `length` or `size` is equal to the given number\n * `n`.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3);\n *     expect('foo').to.have.lengthOf(3);\n *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n *\n * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n * best to assert that the target's `length` property is equal to its expected\n * value, rather than not equal to one of many unexpected values.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n *\n * `.lengthOf` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n *\n * `.lengthOf` can also be used as a language chain, causing all `.above`,\n * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n * chain to use the target's `length` property as the target. However, it's\n * often best to assert that the target's `length` property is equal to its\n * expected length, rather than asserting that its `length` property falls\n * within some range of values.\n *\n *     // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf(3);\n *\n *     // Not recommended\n *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n *\n * Due to a compatibility issue, the alias `.length` can't be chained directly\n * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n * interchangeably with `.lengthOf` in every situation. It's recommended to\n * always use `.lengthOf` instead of `.length`.\n *\n *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n *\n * @name lengthOf\n * @alias length\n * @param {number} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertLength (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , objType = _.type(obj).toLowerCase()\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi')\n    , descriptor = 'length'\n    , itemsCount;\n\n  switch (objType) {\n    case 'map':\n    case 'set':\n      descriptor = 'size';\n      itemsCount = obj.size;\n      break;\n    default:\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n      itemsCount = obj.length;\n  }\n\n  this.assert(\n      itemsCount == n\n    , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n    , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n    , n\n    , itemsCount\n  );\n}\n\nAssertion.addChainableMethod('length', assertLength, assertLengthChain);\nAssertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n/**\n * ### .match(re[, msg])\n *\n * Asserts that the target matches the given regular expression `re`.\n *\n *     expect('foobar').to.match(/^foo/);\n *\n * Add `.not` earlier in the chain to negate `.match`.\n *\n *     expect('foobar').to.not.match(/taco/);\n *\n * `.match` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n *\n * The alias `.matches` can be used interchangeably with `.match`.\n *\n * @name match\n * @alias matches\n * @param {RegExp} re\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertMatch(re, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  this.assert(\n      re.exec(obj)\n    , 'expected #{this} to match ' + re\n    , 'expected #{this} not to match ' + re\n  );\n}\n\nAssertion.addMethod('match', assertMatch);\nAssertion.addMethod('matches', assertMatch);\n\n/**\n * ### .string(str[, msg])\n *\n * Asserts that the target string contains the given substring `str`.\n *\n *     expect('foobar').to.have.string('bar');\n *\n * Add `.not` earlier in the chain to negate `.string`.\n *\n *     expect('foobar').to.not.have.string('taco');\n *\n * `.string` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n *\n * @name string\n * @param {string} str\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nAssertion.addMethod('string', function (str, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi');\n  new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n  this.assert(\n      ~obj.indexOf(str)\n    , 'expected #{this} to contain ' + _.inspect(str)\n    , 'expected #{this} to not contain ' + _.inspect(str)\n  );\n});\n\n/**\n * ### .keys(key1[, key2[, ...]])\n *\n * Asserts that the target object, array, map, or set has the given keys. Only\n * the target's own inherited properties are included in the search.\n *\n * When the target is an object or array, keys can be provided as one or more\n * string arguments, a single array argument, or a single object argument. In\n * the latter case, only the keys in the given object matter; the values are\n * ignored.\n *\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *     expect(['x', 'y']).to.have.all.keys(0, 1);\n *\n *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n *\n *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n *\n * When the target is a map or set, each key must be provided as a separate\n * argument.\n *\n *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n *\n * Because `.keys` does different things based on the target's type, it's\n * important to check the target's type before using `.keys`. See the `.a` doc\n * for info on testing a target's type.\n *\n *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n *\n * By default, strict (`===`) equality is used to compare keys of maps and\n * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n * the `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target set deeply (but not strictly) has key `{a: 1}`\n *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n *\n * By default, the target must have all of the given keys and no more. Add\n * `.any` earlier in the chain to only require that the target have at least\n * one of the given keys. Also, add `.not` earlier in the chain to negate\n * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n * `.all` when asserting `.keys` without negation.\n *\n * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n * exactly what's expected of the output, whereas `.not.all.keys` creates\n * uncertain expectations.\n *\n *     // Recommended; asserts that target doesn't have any of the given keys\n *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n *\n *     // Not recommended; asserts that target doesn't have all of the given\n *     // keys but may or may not have some of them\n *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n *\n * When asserting `.keys` without negation, `.all` is preferred because\n * `.all.keys` asserts exactly what's expected of the output, whereas\n * `.any.keys` creates uncertain expectations.\n *\n *     // Recommended; asserts that target has all the given keys\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *\n *     // Not recommended; asserts that target has at least one of the given\n *     // keys but may or may not have more of them\n *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n *\n * Note that `.all` is used by default when neither `.all` nor `.any` appear\n * earlier in the chain. However, it's often best to add `.all` anyway because\n * it improves readability.\n *\n *     // Both assertions are identical\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n *\n * Add `.include` earlier in the chain to require that the target's keys be a\n * superset of the expected keys, rather than identical sets.\n *\n *     // Target object's keys are a superset of ['a', 'b'] but not identical\n *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n *\n * However, if `.any` and `.include` are combined, only the `.any` takes\n * effect. The `.include` is ignored in this case.\n *\n *     // Both assertions are identical\n *     expect({a: 1}).to.have.any.keys('a', 'b');\n *     expect({a: 1}).to.include.any.keys('a', 'b');\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n *\n * The alias `.key` can be used interchangeably with `.keys`.\n *\n * @name keys\n * @alias key\n * @param {...string | Array | object} keys\n * @namespace BDD\n * @public\n */\nfunction assertKeys (keys) {\n  var obj = flag(this, 'object')\n    , objType = _.type(obj)\n    , keysType = _.type(keys)\n    , ssfi = flag(this, 'ssfi')\n    , isDeep = flag(this, 'deep')\n    , str\n    , deepStr = ''\n    , actual\n    , ok = true\n    , flagMsg = flag(this, 'message');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n  var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n  if (objType === 'Map' || objType === 'Set') {\n    deepStr = isDeep ? 'deeply ' : '';\n    actual = [];\n\n    // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n    obj.forEach(function (val, key) { actual.push(key) });\n\n    if (keysType !== 'Array') {\n      keys = Array.prototype.slice.call(arguments);\n    }\n  } else {\n    actual = _.getOwnEnumerableProperties(obj);\n\n    switch (keysType) {\n      case 'Array':\n        if (arguments.length > 1) {\n          throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n        }\n        break;\n      case 'Object':\n        if (arguments.length > 1) {\n          throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n        }\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n    keys = keys.map(function (val) {\n      return typeof val === 'symbol' ? val : String(val);\n    });\n  }\n\n  if (!keys.length) {\n    throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n  }\n\n  var len = keys.length\n    , any = flag(this, 'any')\n    , all = flag(this, 'all')\n    , expected = keys\n    , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n  if (!any && !all) {\n    all = true;\n  }\n\n  // Has any\n  if (any) {\n    ok = expected.some(function(expectedKey) {\n      return actual.some(function(actualKey) {\n        return isEql(expectedKey, actualKey);\n      });\n    });\n  }\n\n  // Has all\n  if (all) {\n    ok = expected.every(function(expectedKey) {\n      return actual.some(function(actualKey) {\n        return isEql(expectedKey, actualKey);\n      });\n    });\n\n    if (!flag(this, 'contains')) {\n      ok = ok && keys.length == actual.length;\n    }\n  }\n\n  // Key string\n  if (len > 1) {\n    keys = keys.map(function(key) {\n      return _.inspect(key);\n    });\n    var last = keys.pop();\n    if (all) {\n      str = keys.join(', ') + ', and ' + last;\n    }\n    if (any) {\n      str = keys.join(', ') + ', or ' + last;\n    }\n  } else {\n    str = _.inspect(keys[0]);\n  }\n\n  // Form\n  str = (len > 1 ? 'keys ' : 'key ') + str;\n\n  // Have / include\n  str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n  // Assertion\n  this.assert(\n      ok\n    , 'expected #{this} to ' + deepStr + str\n    , 'expected #{this} to not ' + deepStr + str\n    , expected.slice(0).sort(_.compareByInspect)\n    , actual.sort(_.compareByInspect)\n    , true\n  );\n}\n\nAssertion.addMethod('keys', assertKeys);\nAssertion.addMethod('key', assertKeys);\n\n/**\n * ### .throw([errorLike], [errMsgMatcher], [msg])\n *\n * When no arguments are provided, `.throw` invokes the target function and\n * asserts that an error is thrown.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw();\n *\n * When one argument is provided, and it's an error constructor, `.throw`\n * invokes the target function and asserts that an error is thrown that's an\n * instance of that error constructor.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw(TypeError);\n *\n * When one argument is provided, and it's an error instance, `.throw` invokes\n * the target function and asserts that an error is thrown that's strictly\n * (`===`) equal to that error instance.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(err);\n *\n * When one argument is provided, and it's a string, `.throw` invokes the\n * target function and asserts that an error is thrown with a message that\n * contains that string.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw('salmon');\n *\n * When one argument is provided, and it's a regular expression, `.throw`\n * invokes the target function and asserts that an error is thrown with a\n * message that matches that regular expression.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw(/salmon/);\n *\n * When two arguments are provided, and the first is an error instance or\n * constructor, and the second is a string or regular expression, `.throw`\n * invokes the function and asserts that an error is thrown that fulfills both\n * conditions as described above.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(TypeError, 'salmon');\n *     expect(badFn).to.throw(TypeError, /salmon/);\n *     expect(badFn).to.throw(err, 'salmon');\n *     expect(badFn).to.throw(err, /salmon/);\n *\n * Add `.not` earlier in the chain to negate `.throw`.\n *\n *     var goodFn = function () {};\n *     expect(goodFn).to.not.throw();\n *\n * However, it's dangerous to negate `.throw` when providing any arguments.\n * The problem is that it creates uncertain expectations by asserting that the\n * target either doesn't throw an error, or that it throws an error but of a\n * different type than the given type, or that it throws an error of the given\n * type but with a message that doesn't include the given string. It's often\n * best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to throw an error, it's often best to assert\n * exactly that.\n *\n *     var goodFn = function () {};\n *\n *     expect(goodFn).to.not.throw(); // Recommended\n *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n *\n * When the target is expected to throw an error, it's often best to assert\n * that the error is of its expected type, and has a message that includes an\n * expected string, rather than asserting that it doesn't have one of many\n * unexpected types, and doesn't have a message that includes some string.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *\n *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n *\n * `.throw` changes the target of any assertions that follow in the chain to\n * be the error object that's thrown.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     err.code = 42;\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n *\n * `.throw` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`. When not providing two arguments, always use\n * the second form.\n *\n *     var goodFn = function () {};\n *\n *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n *     expect(goodFn, 'nooo why fail??').to.throw();\n *\n * Due to limitations in ES5, `.throw` may not always work as expected when\n * using a transpiler such as Babel or TypeScript. In particular, it may\n * produce unexpected results when subclassing the built-in `Error` object and\n * then passing the subclassed constructor to `.throw`. See your transpiler's\n * docs for details:\n *\n * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n *\n * Beware of some common mistakes when using the `throw` assertion. One common\n * mistake is to accidentally invoke the function yourself instead of letting\n * the `throw` assertion invoke the function for you. For example, when\n * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n * the target for the assertion.\n *\n *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n *\n * If you need to assert that your function `fn` throws when passed certain\n * arguments, then wrap a call to `fn` inside of another function.\n *\n *     expect(function () { fn(42); }).to.throw();  // Function expression\n *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n *\n * Another common mistake is to provide an object method (or any stand-alone\n * function that relies on `this`) as the target of the assertion. Doing so is\n * problematic because the `this` context will be lost when the function is\n * invoked by `.throw`; there's no way for it to know what `this` is supposed\n * to be. There are two ways around this problem. One solution is to wrap the\n * method or function call inside of another function. Another solution is to\n * use `bind`.\n *\n *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n *\n * Finally, it's worth mentioning that it's a best practice in JavaScript to\n * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n * `TypeError`, and user-defined objects that extend `Error`. No other type of\n * value will generate a stack trace when initialized. With that said, the\n * `throw` assertion does technically support any type of value being thrown,\n * not just `Error` and its derivatives.\n *\n * The aliases `.throws` and `.Throw` can be used interchangeably with\n * `.throw`.\n *\n * @name throw\n * @alias throws\n * @alias Throw\n * @param {Error} errorLike\n * @param {string | RegExp} errMsgMatcher error message\n * @param {string} msg _optional_\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @returns {void} error for chaining (null if no error)\n * @namespace BDD\n * @public\n */\nfunction assertThrows (errorLike, errMsgMatcher, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , ssfi = flag(this, 'ssfi')\n    , flagMsg = flag(this, 'message')\n    , negate = flag(this, 'negate') || false;\n  new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n  if (_.isRegExp(errorLike) || typeof errorLike === 'string') {\n    errMsgMatcher = errorLike;\n    errorLike = null;\n  }\n\n  let caughtErr;\n  let errorWasThrown = false;\n  try {\n    obj();\n  } catch (err) {\n    errorWasThrown = true;\n    caughtErr = err;\n  }\n\n  // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n  // but we want it to match a given set of criteria\n  var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n  // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n  // See Issue #551 and PR #683@GitHub\n  var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n  var errorLikeFail = false;\n  var errMsgMatcherFail = false;\n\n  // Checking if error was thrown\n  if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n    // We need this to display results correctly according to their types\n    var errorLikeString = 'an error';\n    if (errorLike instanceof Error) {\n      errorLikeString = '#{exp}';\n    } else if (errorLike) {\n      errorLikeString = _.checkError.getConstructorName(errorLike);\n    }\n\n    let actual = caughtErr;\n    if (caughtErr instanceof Error) {\n      actual = caughtErr.toString();\n    } else if (typeof caughtErr === 'string') {\n      actual = caughtErr;\n    } else if (caughtErr && (typeof caughtErr === 'object' || typeof caughtErr === 'function')) {\n      try {\n        actual = _.checkError.getConstructorName(caughtErr);\n      } catch (_err) {\n        // somehow wasn't a constructor, maybe we got a function thrown\n        // or similar\n      }\n    }\n\n    this.assert(\n      errorWasThrown\n      , 'expected #{this} to throw ' + errorLikeString\n      , 'expected #{this} to not throw an error but #{act} was thrown'\n      , errorLike && errorLike.toString()\n      , actual\n    );\n  }\n\n  if (errorLike && caughtErr) {\n    // We should compare instances only if `errorLike` is an instance of `Error`\n    if (errorLike instanceof Error) {\n      var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n      if (isCompatibleInstance === negate) {\n        // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n        // See Issue #551 and PR #683@GitHub\n        if (everyArgIsDefined && negate) {\n          errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n            , errorLike.toString()\n            , caughtErr.toString()\n          );\n        }\n      }\n    }\n\n    var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n    if (isCompatibleConstructor === negate) {\n      if (everyArgIsDefined && negate) {\n          errorLikeFail = true;\n      } else {\n        this.assert(\n            negate\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n          , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n          , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n        );\n      }\n    }\n  }\n\n  if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n    // Here we check compatible messages\n    var placeholder = 'including';\n    if (_.isRegExp(errMsgMatcher)) {\n      placeholder = 'matching'\n    }\n\n    var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n    if (isCompatibleMessage === negate) {\n      if (everyArgIsDefined && negate) {\n          errMsgMatcherFail = true;\n      } else {\n        this.assert(\n          negate\n          , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n          , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n          ,  errMsgMatcher\n          ,  _.checkError.getMessage(caughtErr)\n        );\n      }\n    }\n  }\n\n  // If both assertions failed and both should've matched we throw an error\n  if (errorLikeFail && errMsgMatcherFail) {\n    this.assert(\n      negate\n      , 'expected #{this} to throw #{exp} but #{act} was thrown'\n      , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n      , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n      , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n    );\n  }\n\n  flag(this, 'object', caughtErr);\n};\n\nAssertion.addMethod('throw', assertThrows);\nAssertion.addMethod('throws', assertThrows);\nAssertion.addMethod('Throw', assertThrows);\n\n/**\n * ### .respondTo(method[, msg])\n *\n * When the target is a non-function object, `.respondTo` asserts that the\n * target has a method with the given name `method`. The method can be own or\n * inherited, and it can be enumerable or non-enumerable.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(new Cat()).to.respondTo('meow');\n *\n * When the target is a function, `.respondTo` asserts that the target's\n * `prototype` property has a method with the given name `method`. Again, the\n * method can be own or inherited, and it can be enumerable or non-enumerable.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(Cat).to.respondTo('meow');\n *\n * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n * target as a non-function object, even if it's a function. Thus, it asserts\n * that the target has a method with the given name `method`, rather than\n * asserting that the target's `prototype` property has a method with the\n * given name `method`.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *     Cat.hiss = function () {};\n *\n *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n *\n * When not adding `.itself`, it's important to check the target's type before\n * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n *\n * Add `.not` earlier in the chain to negate `.respondTo`.\n *\n *     function Dog () {}\n *     Dog.prototype.bark = function () {};\n *\n *     expect(new Dog()).to.not.respondTo('meow');\n *\n * `.respondTo` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect({}).to.respondTo('meow', 'nooo why fail??');\n *     expect({}, 'nooo why fail??').to.respondTo('meow');\n *\n * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n *\n * @name respondTo\n * @alias respondsTo\n * @param {string} method\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction respondTo (method, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , itself = flag(this, 'itself')\n    , context = ('function' === typeof obj && !itself)\n      ? obj.prototype[method]\n      : obj[method];\n\n  this.assert(\n      'function' === typeof context\n    , 'expected #{this} to respond to ' + _.inspect(method)\n    , 'expected #{this} to not respond to ' + _.inspect(method)\n  );\n}\n\nAssertion.addMethod('respondTo', respondTo);\nAssertion.addMethod('respondsTo', respondTo);\n\n/**\n * ### .itself\n *\n * Forces all `.respondTo` assertions that follow in the chain to behave as if\n * the target is a non-function object, even if it's a function. Thus, it\n * causes `.respondTo` to assert that the target has a method with the given\n * name, rather than asserting that the target's `prototype` property has a\n * method with the given name.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *     Cat.hiss = function () {};\n *\n *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n *\n * @name itself\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('itself', function () {\n  flag(this, 'itself', true);\n});\n\n/**\n * ### .satisfy(matcher[, msg])\n *\n * Invokes the given `matcher` function with the target being passed as the\n * first argument, and asserts that the value returned is truthy.\n *\n *     expect(1).to.satisfy(function(num) {\n *         return num > 0;\n *     });\n *\n * Add `.not` earlier in the chain to negate `.satisfy`.\n *\n *     expect(1).to.not.satisfy(function(num) {\n *         return num > 2;\n *     });\n *\n * `.satisfy` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1).to.satisfy(function(num) {\n *         return num > 2;\n *     }, 'nooo why fail??');\n *\n *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n *         return num > 2;\n *     });\n *\n * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n *\n * @name satisfy\n * @alias satisfies\n * @param {Function} matcher\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction satisfy (matcher, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  var result = matcher(obj);\n  this.assert(\n      result\n    , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n    , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n    , flag(this, 'negate') ? false : true\n    , result\n  );\n}\n\nAssertion.addMethod('satisfy', satisfy);\nAssertion.addMethod('satisfies', satisfy);\n\n/**\n * ### .closeTo(expected, delta[, msg])\n *\n * Asserts that the target is a number that's within a given +/- `delta` range\n * of the given number `expected`. However, it's often best to assert that the\n * target is equal to its expected value.\n *\n *     // Recommended\n *     expect(1.5).to.equal(1.5);\n *\n *     // Not recommended\n *     expect(1.5).to.be.closeTo(1, 0.5);\n *     expect(1.5).to.be.closeTo(2, 0.5);\n *     expect(1.5).to.be.closeTo(1, 1);\n *\n * Add `.not` earlier in the chain to negate `.closeTo`.\n *\n *     expect(1.5).to.equal(1.5); // Recommended\n *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n *\n * `.closeTo` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n *\n * The alias `.approximately` can be used interchangeably with `.closeTo`.\n *\n * @name closeTo\n * @alias approximately\n * @param {number} expected\n * @param {number} delta\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction closeTo(expected, delta, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi');\n\n  new Assertion(obj, flagMsg, ssfi, true).is.numeric;\n  let message =  'A `delta` value is required for `closeTo`';\n  if (delta == undefined) throw new AssertionError(flagMsg ? `${flagMsg}: ${message}` : message, undefined, ssfi);\n  new Assertion(delta, flagMsg, ssfi, true).is.numeric;\n  message =  'A `expected` value is required for `closeTo`';\n  if (expected == undefined) throw new AssertionError(flagMsg ? `${flagMsg}: ${message}` : message, undefined, ssfi);\n  new Assertion(expected, flagMsg, ssfi, true).is.numeric;\n\n  const abs = (x) => x < 0n ? -x : x;\n\n  this.assert(\n      abs(obj - expected) <= delta\n    , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n    , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n  );\n}\n\nAssertion.addMethod('closeTo', closeTo);\nAssertion.addMethod('approximately', closeTo);\n\n/**\n * @param {unknown} _subset\n * @param {unknown} _superset\n * @param {unknown} cmp\n * @param {unknown} contains\n * @param {unknown} ordered\n * @returns {boolean}\n */\nfunction isSubsetOf(_subset, _superset, cmp, contains, ordered) {\n  let superset = Array.from(_superset);\n  let subset = Array.from(_subset);\n  if (!contains) {\n    if (subset.length !== superset.length) return false;\n    superset = superset.slice();\n  }\n\n  return subset.every(function(elem, idx) {\n    if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n    if (!cmp) {\n      var matchIdx = superset.indexOf(elem);\n      if (matchIdx === -1) return false;\n\n      // Remove match from superset so not counted twice if duplicate in subset.\n      if (!contains) superset.splice(matchIdx, 1);\n      return true;\n    }\n\n    return superset.some(function(elem2, matchIdx) {\n      if (!cmp(elem, elem2)) return false;\n\n      // Remove match from superset so not counted twice if duplicate in subset.\n      if (!contains) superset.splice(matchIdx, 1);\n      return true;\n    });\n  });\n}\n\n/**\n * ### .members(set[, msg])\n *\n * Asserts that the target array has the same members as the given array\n * `set`.\n *\n *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n *\n * By default, members are compared using strict (`===`) equality. Add `.deep`\n * earlier in the chain to use deep equality instead. See the `deep-eql`\n * project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target array deeply (but not strictly) has member `{a: 1}`\n *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n *\n * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n * require that members appear in the same order.\n *\n *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n *       .but.not.ordered.members([2, 1, 3]);\n *\n * By default, both arrays must be the same size. Add `.include` earlier in\n * the chain to require that the target's members be a superset of the\n * expected members. Note that duplicates are ignored in the subset when\n * `.include` is added.\n *\n *     // Target array is a superset of [1, 2] but not identical\n *     expect([1, 2, 3]).to.include.members([1, 2]);\n *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n *\n *     // Duplicates in the subset are ignored\n *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n *\n * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n * `.include` and `.ordered` are combined, the ordering begins at the start of\n * both arrays.\n *\n *     expect([{a: 1}, {b: 2}, {c: 3}])\n *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n *\n * Add `.not` earlier in the chain to negate `.members`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the target array doesn't have all of the same members as\n * the given array `set` but may or may not have some of them. It's often best\n * to identify the exact output that's expected, and then write an assertion\n * that only accepts that exact output.\n *\n *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n *\n * `.members` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n *\n * @name members\n * @param {Array} set\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nAssertion.addMethod('members', function (subset, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi');\n\n  new Assertion(obj, flagMsg, ssfi, true).to.be.iterable;\n  new Assertion(subset, flagMsg, ssfi, true).to.be.iterable;\n\n  var contains = flag(this, 'contains');\n  var ordered = flag(this, 'ordered');\n\n  var subject, failMsg, failNegateMsg;\n\n  if (contains) {\n    subject = ordered ? 'an ordered superset' : 'a superset';\n    failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n    failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n  } else {\n    subject = ordered ? 'ordered members' : 'members';\n    failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n    failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n  }\n\n  var cmp = flag(this, 'deep') ? flag(this, 'eql') : undefined;\n\n  this.assert(\n      isSubsetOf(subset, obj, cmp, contains, ordered)\n    , failMsg\n    , failNegateMsg\n    , subset\n    , obj\n    , true\n  );\n});\n\n/**\n * ### .iterable\n *\n * Asserts that the target is an iterable, which means that it has a iterator.\n *\n *     expect([1, 2]).to.be.iterable;\n *     expect(\"foobar\").to.be.iterable;\n *\n * Add `.not` earlier in the chain to negate `.iterable`.\n *\n *     expect(1).to.not.be.iterable;\n *     expect(true).to.not.be.iterable;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(1, 'nooo why fail??').to.be.iterable;\n *\n * @name iterable\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('iterable', function(msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n\n  this.assert(\n    obj != undefined && obj[Symbol.iterator]\n    , 'expected #{this} to be an iterable'\n    , 'expected #{this} to not be an iterable'\n    , obj\n  );\n});\n\n/**\n * ### .oneOf(list[, msg])\n *\n * Asserts that the target is a member of the given array `list`. However,\n * it's often best to assert that the target is equal to its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n *\n * Comparisons are performed using strict (`===`) equality.\n *\n * Add `.not` earlier in the chain to negate `.oneOf`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n *\n * It can also be chained with `.contain` or `.include`, which will work with\n * both arrays and strings:\n *\n *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n *\n * `.oneOf` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n *\n * @name oneOf\n * @param {Array<*>} list\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction oneOf (list, msg) {\n  if (msg) flag(this, 'message', msg);\n  var expected = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi')\n    , contains = flag(this, 'contains')\n    , isDeep = flag(this, 'deep')\n    , eql = flag(this, 'eql');\n  new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n  if (contains) {\n    this.assert(\n      list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n      , 'expected #{this} to contain one of #{exp}'\n      , 'expected #{this} to not contain one of #{exp}'\n      , list\n      , expected\n    );\n  } else {\n    if (isDeep) {\n      this.assert(\n        list.some(function(possibility) { return eql(expected, possibility) })\n        , 'expected #{this} to deeply equal one of #{exp}'\n        , 'expected #{this} to deeply equal one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      this.assert(\n        list.indexOf(expected) > -1\n        , 'expected #{this} to be one of #{exp}'\n        , 'expected #{this} to not be one of #{exp}'\n        , list\n        , expected\n      );\n    }\n  }\n}\n\nAssertion.addMethod('oneOf', oneOf);\n\n/**\n * ### .change(subject[, prop[, msg]])\n *\n * When one argument is provided, `.change` asserts that the given function\n * `subject` returns a different value when it's invoked before the target\n * function compared to when it's invoked afterward. However, it's often best\n * to assert that `subject` is equal to its expected value.\n *\n *     var dots = ''\n *     , addDot = function () { dots += '.'; }\n *     , getDots = function () { return dots; };\n *\n *     // Recommended\n *     expect(getDots()).to.equal('');\n *     addDot();\n *     expect(getDots()).to.equal('.');\n *\n *     // Not recommended\n *     expect(addDot).to.change(getDots);\n *\n * When two arguments are provided, `.change` asserts that the value of the\n * given object `subject`'s `prop` property is different before invoking the\n * target function compared to afterward.\n *\n *     var myObj = {dots: ''}\n *     , addDot = function () { myObj.dots += '.'; };\n *\n *     // Recommended\n *     expect(myObj).to.have.property('dots', '');\n *     addDot();\n *     expect(myObj).to.have.property('dots', '.');\n *\n *     // Not recommended\n *     expect(addDot).to.change(myObj, 'dots');\n *\n * Strict (`===`) equality is used to compare before and after values.\n *\n * Add `.not` earlier in the chain to negate `.change`.\n *\n *     var dots = ''\n *     , noop = function () {}\n *     , getDots = function () { return dots; };\n *\n *     expect(noop).to.not.change(getDots);\n *\n *     var myObj = {dots: ''}\n *     , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'dots');\n *\n * `.change` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {dots: ''}\n *     , addDot = function () { myObj.dots += '.'; };\n *\n *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n *\n *     var dots = ''\n *     , addDot = function () { dots += '.'; }\n *     , getDots = function () { return dots; };\n *\n *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n *\n * `.change` also causes all `.by` assertions that follow in the chain to\n * assert how much a numeric subject was increased or decreased by. However,\n * it's dangerous to use `.change.by`. The problem is that it creates\n * uncertain expectations by asserting that the subject either increases by\n * the given delta, or that it decreases by the given delta. It's often best\n * to identify the exact output that's expected, and then write an assertion\n * that only accepts that exact output.\n *\n *     var myObj = {val: 1}\n *     , addTwo = function () { myObj.val += 2; }\n *     , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n * The alias `.changes` can be used interchangeably with `.change`.\n *\n * @name change\n * @alias changes\n * @param {string} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertChanges (subject, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  var fn = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi');\n  new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n  var initial;\n  if (!prop) {\n    new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n    initial = subject();\n  } else {\n    new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n    initial = subject[prop];\n  }\n\n  fn();\n\n  var final = prop === undefined || prop === null ? subject() : subject[prop];\n  var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n  // This gets flagged because of the .by(delta) assertion\n  flag(this, 'deltaMsgObj', msgObj);\n  flag(this, 'initialDeltaValue', initial);\n  flag(this, 'finalDeltaValue', final);\n  flag(this, 'deltaBehavior', 'change');\n  flag(this, 'realDelta', final !== initial);\n\n  this.assert(\n    initial !== final\n    , 'expected ' + msgObj + ' to change'\n    , 'expected ' + msgObj + ' to not change'\n  );\n}\n\nAssertion.addMethod('change', assertChanges);\nAssertion.addMethod('changes', assertChanges);\n\n/**\n * ### .increase(subject[, prop[, msg]])\n *\n * When one argument is provided, `.increase` asserts that the given function\n * `subject` returns a greater number when it's invoked after invoking the\n * target function compared to when it's invoked beforehand. `.increase` also\n * causes all `.by` assertions that follow in the chain to assert how much\n * greater of a number is returned. It's often best to assert that the return\n * value increased by the expected amount, rather than asserting it increased\n * by any amount.\n *\n *     var val = 1\n *     , addTwo = function () { val += 2; }\n *     , getVal = function () { return val; };\n *\n *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n *     expect(addTwo).to.increase(getVal); // Not recommended\n *\n * When two arguments are provided, `.increase` asserts that the value of the\n * given object `subject`'s `prop` property is greater after invoking the\n * target function compared to beforehand.\n *\n *     var myObj = {val: 1}\n *     , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.increase`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either decreases, or that it stays the same.\n * It's often best to identify the exact output that's expected, and then\n * write an assertion that only accepts that exact output.\n *\n * When the subject is expected to decrease, it's often best to assert that it\n * decreased by the expected amount.\n *\n *     var myObj = {val: 1}\n *     , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n *\n * When the subject is expected to stay the same, it's often best to assert\n * exactly that.\n *\n *     var myObj = {val: 1}\n *     , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n *\n * `.increase` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {val: 1}\n *     , noop = function () {};\n *\n *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n *\n *     var val = 1\n *     , noop = function () {}\n *     , getVal = function () { return val; };\n *\n *     expect(noop, 'nooo why fail??').to.increase(getVal);\n *\n * The alias `.increases` can be used interchangeably with `.increase`.\n *\n * @name increase\n * @alias increases\n * @param {string | Function} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertIncreases (subject, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  var fn = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi');\n  new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n  var initial;\n  if (!prop) {\n    new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n    initial = subject();\n  } else {\n    new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n    initial = subject[prop];\n  }\n\n  // Make sure that the target is a number\n  new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n  fn();\n\n  var final = prop === undefined || prop === null ? subject() : subject[prop];\n  var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n  flag(this, 'deltaMsgObj', msgObj);\n  flag(this, 'initialDeltaValue', initial);\n  flag(this, 'finalDeltaValue', final);\n  flag(this, 'deltaBehavior', 'increase');\n  flag(this, 'realDelta', final - initial);\n\n  this.assert(\n    final - initial > 0\n    , 'expected ' + msgObj + ' to increase'\n    , 'expected ' + msgObj + ' to not increase'\n  );\n}\n\nAssertion.addMethod('increase', assertIncreases);\nAssertion.addMethod('increases', assertIncreases);\n\n/**\n * ### .decrease(subject[, prop[, msg]])\n *\n * When one argument is provided, `.decrease` asserts that the given function\n * `subject` returns a lesser number when it's invoked after invoking the\n * target function compared to when it's invoked beforehand. `.decrease` also\n * causes all `.by` assertions that follow in the chain to assert how much\n * lesser of a number is returned. It's often best to assert that the return\n * value decreased by the expected amount, rather than asserting it decreased\n * by any amount.\n *\n *     var val = 1\n *       , subtractTwo = function () { val -= 2; }\n *       , getVal = function () { return val; };\n *\n *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n *\n * When two arguments are provided, `.decrease` asserts that the value of the\n * given object `subject`'s `prop` property is lesser after invoking the\n * target function compared to beforehand.\n *\n *     var myObj = {val: 1}\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either increases, or that it stays the same.\n * It's often best to identify the exact output that's expected, and then\n * write an assertion that only accepts that exact output.\n *\n * When the subject is expected to increase, it's often best to assert that it\n * increased by the expected amount.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n *\n * When the subject is expected to stay the same, it's often best to assert\n * exactly that.\n *\n *     var myObj = {val: 1}\n *       , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n *\n * `.decrease` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {val: 1}\n *       , noop = function () {};\n *\n *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n *\n *     var val = 1\n *       , noop = function () {}\n *       , getVal = function () { return val; };\n *\n *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n *\n * The alias `.decreases` can be used interchangeably with `.decrease`.\n *\n * @name decrease\n * @alias decreases\n * @param {string | Function} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertDecreases (subject, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  var fn = flag(this, 'object')\n    , flagMsg = flag(this, 'message')\n    , ssfi = flag(this, 'ssfi');\n  new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n  var initial;\n  if (!prop) {\n    new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n    initial = subject();\n  } else {\n    new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n    initial = subject[prop];\n  }\n\n  // Make sure that the target is a number\n  new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n  fn();\n\n  var final = prop === undefined || prop === null ? subject() : subject[prop];\n  var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n  flag(this, 'deltaMsgObj', msgObj);\n  flag(this, 'initialDeltaValue', initial);\n  flag(this, 'finalDeltaValue', final);\n  flag(this, 'deltaBehavior', 'decrease');\n  flag(this, 'realDelta', initial - final);\n\n  this.assert(\n    final - initial < 0\n    , 'expected ' + msgObj + ' to decrease'\n    , 'expected ' + msgObj + ' to not decrease'\n  );\n}\n\nAssertion.addMethod('decrease', assertDecreases);\nAssertion.addMethod('decreases', assertDecreases);\n\n/**\n * ### .by(delta[, msg])\n *\n * When following an `.increase` assertion in the chain, `.by` asserts that\n * the subject of the `.increase` assertion increased by the given `delta`.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2);\n *\n * When following a `.decrease` assertion in the chain, `.by` asserts that the\n * subject of the `.decrease` assertion decreased by the given `delta`.\n *\n *     var myObj = {val: 1}\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n *\n * When following a `.change` assertion in the chain, `.by` asserts that the\n * subject of the `.change` assertion either increased or decreased by the\n * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n * that it creates uncertain expectations. It's often best to identify the\n * exact output that's expected, and then write an assertion that only accepts\n * that exact output.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; }\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n * to assert that the subject changed by its expected delta, rather than\n * asserting that it didn't change by one of countless unexpected deltas.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     // Recommended\n *     expect(addTwo).to.increase(myObj, 'val').by(2);\n *\n *     // Not recommended\n *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n *\n * `.by` accepts an optional `msg` argument which is a custom error message to\n * show when the assertion fails. The message can also be given as the second\n * argument to `expect`.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n *\n * @name by\n * @param {number} delta\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertDelta(delta, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  var msgObj = flag(this, 'deltaMsgObj');\n  var initial = flag(this, 'initialDeltaValue');\n  var final = flag(this, 'finalDeltaValue');\n  var behavior = flag(this, 'deltaBehavior');\n  var realDelta = flag(this, 'realDelta');\n\n  var expression;\n  if (behavior === 'change') {\n    expression = Math.abs(final - initial) === Math.abs(delta);\n  } else {\n    expression = realDelta === Math.abs(delta);\n  }\n\n  this.assert(\n    expression\n    , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n    , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n  );\n}\n\nAssertion.addMethod('by', assertDelta);\n\n/**\n * ### .extensible\n *\n * Asserts that the target is extensible, which means that new properties can\n * be added to it. Primitives are never extensible.\n *\n *     expect({a: 1}).to.be.extensible;\n *\n * Add `.not` earlier in the chain to negate `.extensible`.\n *\n *     var nonExtensibleObject = Object.preventExtensions({})\n *     , sealedObject = Object.seal({})\n *     , frozenObject = Object.freeze({});\n *\n *     expect(nonExtensibleObject).to.not.be.extensible;\n *     expect(sealedObject).to.not.be.extensible;\n *     expect(frozenObject).to.not.be.extensible;\n *     expect(1).to.not.be.extensible;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(1, 'nooo why fail??').to.be.extensible;\n *\n * @name extensible\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('extensible', function() {\n  var obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n  // The following provides ES6 behavior for ES5 environments.\n\n  var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n  this.assert(\n    isExtensible\n    , 'expected #{this} to be extensible'\n    , 'expected #{this} to not be extensible'\n  );\n});\n\n/**\n * ### .sealed\n *\n * Asserts that the target is sealed, which means that new properties can't be\n * added to it, and its existing properties can't be reconfigured or deleted.\n * However, it's possible that its existing properties can still be reassigned\n * to different values. Primitives are always sealed.\n *\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.freeze({});\n *\n *     expect(sealedObject).to.be.sealed;\n *     expect(frozenObject).to.be.sealed;\n *     expect(1).to.be.sealed;\n *\n * Add `.not` earlier in the chain to negate `.sealed`.\n *\n *     expect({a: 1}).to.not.be.sealed;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n *\n * @name sealed\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('sealed', function() {\n  var obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n  // The following provides ES6 behavior for ES5 environments.\n\n  var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n  this.assert(\n    isSealed\n    , 'expected #{this} to be sealed'\n    , 'expected #{this} to not be sealed'\n  );\n});\n\n/**\n * ### .frozen\n *\n * Asserts that the target is frozen, which means that new properties can't be\n * added to it, and its existing properties can't be reassigned to different\n * values, reconfigured, or deleted. Primitives are always frozen.\n *\n *     var frozenObject = Object.freeze({});\n *\n *     expect(frozenObject).to.be.frozen;\n *     expect(1).to.be.frozen;\n *\n * Add `.not` earlier in the chain to negate `.frozen`.\n *\n *     expect({a: 1}).to.not.be.frozen;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n *\n * @name frozen\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('frozen', function() {\n  var obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n  // The following provides ES6 behavior for ES5 environments.\n\n  var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n  this.assert(\n    isFrozen\n    , 'expected #{this} to be frozen'\n    , 'expected #{this} to not be frozen'\n  );\n});\n\n/**\n * ### .finite\n *\n * Asserts that the target is a number, and isn't `NaN` or positive/negative\n * `Infinity`.\n *\n *     expect(1).to.be.finite;\n *\n * Add `.not` earlier in the chain to negate `.finite`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either isn't a number, or that it's `NaN`, or\n * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n * best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to be a number, it's often best to assert\n * that it's the expected type, rather than asserting that it isn't one of\n * many unexpected types.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.finite; // Not recommended\n *\n * When the target is expected to be `NaN`, it's often best to assert exactly\n * that.\n *\n *     expect(NaN).to.be.NaN; // Recommended\n *     expect(NaN).to.not.be.finite; // Not recommended\n *\n * When the target is expected to be positive infinity, it's often best to\n * assert exactly that.\n *\n *     expect(Infinity).to.equal(Infinity); // Recommended\n *     expect(Infinity).to.not.be.finite; // Not recommended\n *\n * When the target is expected to be negative infinity, it's often best to\n * assert exactly that.\n *\n *     expect(-Infinity).to.equal(-Infinity); // Recommended\n *     expect(-Infinity).to.not.be.finite; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect('foo', 'nooo why fail??').to.be.finite;\n *\n * @name finite\n * @namespace BDD\n * @public\n */\nAssertion.addProperty('finite', function(msg) {\n  var obj = flag(this, 'object');\n\n  this.assert(\n      typeof obj === 'number' && isFinite(obj)\n    , 'expected #{this} to be a finite number'\n    , 'expected #{this} to not be a finite number'\n  );\n});\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport * as chai from '../../../index.js';\nimport {Assertion} from '../assertion.js';\nimport {AssertionError} from 'assertion-error';\n\n/**\n * @param {unknown} val\n * @param {string} message\n * @returns {Assertion}\n */\nfunction expect(val, message) {\n  return new Assertion(val, message);\n}\n\nexport {expect};\n\n/**\n * ### .fail([message])\n * ### .fail(actual, expected, [message], [operator])\n *\n * Throw a failure.\n *\n *     expect.fail();\n *     expect.fail(\"custom error message\");\n *     expect.fail(1, 2);\n *     expect.fail(1, 2, \"custom error message\");\n *     expect.fail(1, 2, \"custom error message\", \">\");\n *     expect.fail(1, 2, undefined, \">\");\n *\n * @name fail\n * @param {unknown} actual\n * @param {unknown} expected\n * @param {string} message\n * @param {string} operator\n * @namespace expect\n * @public\n */\nexpect.fail = function (actual, expected, message, operator) {\n  if (arguments.length < 2) {\n      message = actual;\n      actual = undefined;\n  }\n\n  message = message || 'expect.fail()';\n  throw new AssertionError(message, {\n      actual: actual\n    , expected: expected\n    , operator: operator\n  }, chai.expect.fail);\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nimport * as chai from '../../../index.js';\nimport {Assertion} from '../assertion.js';\nimport {flag, inspect} from '../utils/index.js';\nimport {AssertionError} from 'assertion-error';\n\n/**\n * ### assert(expression, message)\n *\n * Write your own test expressions.\n *\n *     assert('foo' !== 'bar', 'foo is not bar');\n *     assert(Array.isArray([]), 'empty arrays are arrays');\n *\n * @param {unknown} express - expression to test for truthiness\n * @param {string} errmsg - message to display on error\n * @name assert\n * @namespace Assert\n * @public\n */\nexport function assert(express, errmsg) {\n  var test = new Assertion(null, null, chai.assert, true);\n  test.assert(\n      express\n    , errmsg\n    , '[ negation message unavailable ]'\n  );\n}\n\n/**\n * ### .fail([message])\n * ### .fail(actual, expected, [message], [operator])\n *\n * Throw a failure. Node.js `assert` module-compatible.\n *\n *     assert.fail();\n *     assert.fail(\"custom error message\");\n *     assert.fail(1, 2);\n *     assert.fail(1, 2, \"custom error message\");\n *     assert.fail(1, 2, \"custom error message\", \">\");\n *     assert.fail(1, 2, undefined, \">\");\n *\n * @name fail\n * @param {unknown} actual\n * @param {unknown} expected\n * @param {string} message\n * @param {string} operator\n * @namespace Assert\n * @public\n */\nassert.fail = function (actual, expected, message, operator) {\n  if (arguments.length < 2) {\n      // Comply with Node's fail([message]) interface\n\n      message = actual;\n      actual = undefined;\n  }\n\n  message = message || 'assert.fail()';\n  throw new AssertionError(message, {\n      actual: actual\n    , expected: expected\n    , operator: operator\n  }, assert.fail);\n};\n\n/**\n * ### .isOk(object, [message])\n *\n * Asserts that `object` is truthy.\n *\n *     assert.isOk('everything', 'everything is ok');\n *     assert.isOk(false, 'this will fail');\n *\n * @name isOk\n * @alias ok\n * @param {unknown} val object to test\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isOk = function (val, msg) {\n  new Assertion(val, msg, assert.isOk, true).is.ok;\n};\n\n/**\n * ### .isNotOk(object, [message])\n *\n * Asserts that `object` is falsy.\n *\n *     assert.isNotOk('everything', 'this will fail');\n *     assert.isNotOk(false, 'this will pass');\n *\n * @name isNotOk\n * @alias notOk\n * @param {unknown} val object to test\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotOk = function (val, msg) {\n  new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n};\n\n/**\n * ### .equal(actual, expected, [message])\n *\n * Asserts non-strict equality (`==`) of `actual` and `expected`.\n *\n *     assert.equal(3, '3', '== coerces values to strings');\n *\n * @name equal\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.equal = function (act, exp, msg) {\n  var test = new Assertion(act, msg, assert.equal, true);\n\n  test.assert(\n      exp == flag(test, 'object')\n    , 'expected #{this} to equal #{exp}'\n    , 'expected #{this} to not equal #{act}'\n    , exp\n    , act\n    , true\n  );\n};\n\n/**\n * ### .notEqual(actual, expected, [message])\n *\n * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n *\n *     assert.notEqual(3, 4, 'these numbers are not equal');\n *\n * @name notEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notEqual = function (act, exp, msg) {\n  var test = new Assertion(act, msg, assert.notEqual, true);\n\n  test.assert(\n      exp != flag(test, 'object')\n    , 'expected #{this} to not equal #{exp}'\n    , 'expected #{this} to equal #{act}'\n    , exp\n    , act\n    , true\n  );\n};\n\n/**\n * ### .strictEqual(actual, expected, [message])\n *\n * Asserts strict equality (`===`) of `actual` and `expected`.\n *\n *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n *\n * @name strictEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.strictEqual = function (act, exp, msg) {\n  new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n};\n\n/**\n * ### .notStrictEqual(actual, expected, [message])\n *\n * Asserts strict inequality (`!==`) of `actual` and `expected`.\n *\n *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n *\n * @name notStrictEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notStrictEqual = function (act, exp, msg) {\n  new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n};\n\n/**\n * ### .deepEqual(actual, expected, [message])\n *\n * Asserts that `actual` is deeply equal to `expected`.\n *\n *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n *\n * @name deepEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @alias deepStrictEqual\n * @namespace Assert\n * @public\n */\nassert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n  new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n};\n\n/**\n * ### .notDeepEqual(actual, expected, [message])\n *\n * Assert that `actual` is not deeply equal to `expected`.\n *\n *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n *\n * @name notDeepEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepEqual = function (act, exp, msg) {\n  new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n};\n\n/**\n * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n *\n * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n *\n *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n *\n * @name isAbove\n * @param {unknown} val\n * @param {unknown} abv\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isAbove = function (val, abv, msg) {\n  new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n};\n\n/**\n * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n *\n * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n *\n *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n *\n * @name isAtLeast\n * @param {unknown} val\n * @param {unknown} atlst\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isAtLeast = function (val, atlst, msg) {\n  new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n};\n\n/**\n * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n *\n * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n *\n *     assert.isBelow(3, 6, '3 is strictly less than 6');\n *\n * @name isBelow\n * @param {unknown} val\n * @param {unknown} blw\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isBelow = function (val, blw, msg) {\n  new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n};\n\n/**\n * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n *\n * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n *\n *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n *\n * @name isAtMost\n * @param {unknown} val\n * @param {unknown} atmst\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isAtMost = function (val, atmst, msg) {\n  new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n};\n\n/**\n * ### .isTrue(value, [message])\n *\n * Asserts that `value` is true.\n *\n *     var teaServed = true;\n *     assert.isTrue(teaServed, 'the tea has been served');\n *\n * @name isTrue\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isTrue = function (val, msg) {\n  new Assertion(val, msg, assert.isTrue, true).is['true'];\n};\n\n/**\n * ### .isNotTrue(value, [message])\n *\n * Asserts that `value` is not true.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotTrue(tea, 'great, time for tea!');\n *\n * @name isNotTrue\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotTrue = function (val, msg) {\n  new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n};\n\n/**\n * ### .isFalse(value, [message])\n *\n * Asserts that `value` is false.\n *\n *     var teaServed = false;\n *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n *\n * @name isFalse\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isFalse = function (val, msg) {\n  new Assertion(val, msg, assert.isFalse, true).is['false'];\n};\n\n/**\n * ### .isNotFalse(value, [message])\n *\n * Asserts that `value` is not false.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotFalse(tea, 'great, time for tea!');\n *\n * @name isNotFalse\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotFalse = function (val, msg) {\n  new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n};\n\n/**\n * ### .isNull(value, [message])\n *\n * Asserts that `value` is null.\n *\n *     assert.isNull(err, 'there was no error');\n *\n * @name isNull\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNull = function (val, msg) {\n  new Assertion(val, msg, assert.isNull, true).to.equal(null);\n};\n\n/**\n * ### .isNotNull(value, [message])\n *\n * Asserts that `value` is not null.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotNull(tea, 'great, time for tea!');\n *\n * @name isNotNull\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotNull = function (val, msg) {\n  new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n};\n\n/**\n * ### .isNaN\n *\n * Asserts that value is NaN.\n *\n *     assert.isNaN(NaN, 'NaN is NaN');\n *\n * @name isNaN\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNaN = function (val, msg) {\n  new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n};\n\n/**\n * ### .isNotNaN\n *\n * Asserts that value is not NaN.\n *\n *     assert.isNotNaN(4, '4 is not NaN');\n *\n * @name isNotNaN\n * @param {unknown} value\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.isNotNaN = function (value, message) {\n  new Assertion(value, message, assert.isNotNaN, true).not.to.be.NaN;\n};\n\n/**\n * ### .exists\n *\n * Asserts that the target is neither `null` nor `undefined`.\n *\n *     var foo = 'hi';\n *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n *\n * @name exists\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.exists = function (val, msg) {\n  new Assertion(val, msg, assert.exists, true).to.exist;\n};\n\n/**\n * ### .notExists\n *\n * Asserts that the target is either `null` or `undefined`.\n *\n *     var bar = null\n *     , baz;\n *\n *     assert.notExists(bar);\n *     assert.notExists(baz, 'baz is either null or undefined');\n *\n * @name notExists\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notExists = function (val, msg) {\n  new Assertion(val, msg, assert.notExists, true).to.not.exist;\n};\n\n/**\n * ### .isUndefined(value, [message])\n *\n * Asserts that `value` is `undefined`.\n *\n *     var tea;\n *     assert.isUndefined(tea, 'no tea defined');\n *\n * @name isUndefined\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isUndefined = function (val, msg) {\n  new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n};\n\n/**\n * ### .isDefined(value, [message])\n *\n * Asserts that `value` is not `undefined`.\n *\n *     var tea = 'cup of chai';\n *     assert.isDefined(tea, 'tea has been defined');\n *\n * @name isDefined\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isDefined = function (val, msg) {\n  new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n};\n\n/**\n * ### .isCallable(value, [message])\n *\n * Asserts that `value` is a callable function.\n *\n *     function serveTea() { return 'cup of tea'; };\n *     assert.isCallable(serveTea, 'great, we can have tea now');\n *\n * @name isCallable\n * @param {unknown} value\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.isCallable = function (value, message) {\n  new Assertion(value, message, assert.isCallable, true).is.callable;\n}\n\n/**\n * ### .isNotCallable(value, [message])\n *\n * Asserts that `value` is _not_ a callable function.\n *\n *     var serveTea = [ 'heat', 'pour', 'sip' ];\n *     assert.isNotCallable(serveTea, 'great, we have listed the steps');\n *\n * @name isNotCallable\n * @param {unknown} value\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.isNotCallable = function (value, message) {\n  new Assertion(value, message, assert.isNotCallable, true).is.not.callable;\n};\n\n/**\n * ### .isObject(value, [message])\n *\n * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n * _The assertion does not match subclassed objects._\n *\n *     var selection = { name: 'Chai', serve: 'with spices' };\n *     assert.isObject(selection, 'tea selection is an object');\n *\n * @name isObject\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isObject = function (val, msg) {\n  new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n};\n\n/**\n * ### .isNotObject(value, [message])\n *\n * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n *\n *     var selection = 'chai'\n *     assert.isNotObject(selection, 'tea selection is not an object');\n *     assert.isNotObject(null, 'null is not an object');\n *\n * @name isNotObject\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotObject = function (val, msg) {\n  new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n};\n\n/**\n * ### .isArray(value, [message])\n *\n * Asserts that `value` is an array.\n *\n *     var menu = [ 'green', 'chai', 'oolong' ];\n *     assert.isArray(menu, 'what kind of tea do we want?');\n *\n * @name isArray\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isArray = function (val, msg) {\n  new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n};\n\n/**\n * ### .isNotArray(value, [message])\n *\n * Asserts that `value` is _not_ an array.\n *\n *     var menu = 'green|chai|oolong';\n *     assert.isNotArray(menu, 'what kind of tea do we want?');\n *\n * @name isNotArray\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotArray = function (val, msg) {\n  new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n};\n\n/**\n * ### .isString(value, [message])\n *\n * Asserts that `value` is a string.\n *\n *     var teaOrder = 'chai';\n *     assert.isString(teaOrder, 'order placed');\n *\n * @name isString\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isString = function (val, msg) {\n  new Assertion(val, msg, assert.isString, true).to.be.a('string');\n};\n\n/**\n * ### .isNotString(value, [message])\n *\n * Asserts that `value` is _not_ a string.\n *\n *     var teaOrder = 4;\n *     assert.isNotString(teaOrder, 'order placed');\n *\n * @name isNotString\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotString = function (val, msg) {\n  new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n};\n\n/**\n * ### .isNumber(value, [message])\n *\n * Asserts that `value` is a number.\n *\n *     var cups = 2;\n *     assert.isNumber(cups, 'how many cups');\n *\n * @name isNumber\n * @param {number} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNumber = function (val, msg) {\n  new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n};\n\n/**\n * ### .isNotNumber(value, [message])\n *\n * Asserts that `value` is _not_ a number.\n *\n *     var cups = '2 cups please';\n *     assert.isNotNumber(cups, 'how many cups');\n *\n * @name isNotNumber\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotNumber = function (val, msg) {\n  new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n};\n\n/**\n * ### .isNumeric(value, [message])\n *\n * Asserts that `value` is a number or BigInt.\n *\n *     var cups = 2;\n *     assert.isNumeric(cups, 'how many cups');\n * \n *     var cups = 10n;\n *     assert.isNumeric(cups, 'how many cups');\n *\n * @name isNumeric\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNumeric = function (val, msg) {\n  new Assertion(val, msg, assert.isNumeric, true).is.numeric;\n};\n\n/**\n * ### .isNotNumeric(value, [message])\n *\n * Asserts that `value` is _not_ a number or BigInt.\n *\n *     var cups = '2 cups please';\n *     assert.isNotNumeric(cups, 'how many cups');\n *\n * @name isNotNumeric\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotNumeric = function (val, msg) {\n  new Assertion(val, msg, assert.isNotNumeric, true).is.not.numeric;\n};\n\n /**\n  * ### .isFinite(value, [message])\n  *\n  * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n  *\n  *     var cups = 2;\n  *     assert.isFinite(cups, 'how many cups');\n  *     assert.isFinite(NaN); // throws\n  *\n  * @name isFinite\n  * @param {number} val\n  * @param {string} msg\n  * @namespace Assert\n  * @public\n  */\nassert.isFinite = function (val, msg) {\n  new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n};\n\n/**\n * ### .isBoolean(value, [message])\n *\n * Asserts that `value` is a boolean.\n *\n *     var teaReady = true\n *     , teaServed = false;\n *\n *     assert.isBoolean(teaReady, 'is the tea ready');\n *     assert.isBoolean(teaServed, 'has tea been served');\n *\n * @name isBoolean\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isBoolean = function (val, msg) {\n  new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n};\n\n/**\n * ### .isNotBoolean(value, [message])\n *\n * Asserts that `value` is _not_ a boolean.\n *\n *     var teaReady = 'yep'\n *     , teaServed = 'nope';\n *\n *     assert.isNotBoolean(teaReady, 'is the tea ready');\n *     assert.isNotBoolean(teaServed, 'has tea been served');\n *\n * @name isNotBoolean\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotBoolean = function (val, msg) {\n  new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n};\n\n/**\n * ### .typeOf(value, name, [message])\n *\n * Asserts that `value`'s type is `name`, as determined by\n * `Object.prototype.toString`.\n *\n *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n *     assert.typeOf('tea', 'string', 'we have a string');\n *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n *     assert.typeOf(null, 'null', 'we have a null');\n *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n *\n * @name typeOf\n * @param {unknown} val\n * @param {string} type\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.typeOf = function (val, type, msg) {\n  new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n};\n\n/**\n * ### .notTypeOf(value, name, [message])\n *\n * Asserts that `value`'s type is _not_ `name`, as determined by\n * `Object.prototype.toString`.\n *\n *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n *\n * @name notTypeOf\n * @param {unknown} value\n * @param {string} type\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.notTypeOf = function (value, type, message) {\n  new Assertion(value, message, assert.notTypeOf, true).to.not.be.a(type);\n};\n\n/**\n * ### .instanceOf(object, constructor, [message])\n *\n * Asserts that `value` is an instance of `constructor`.\n *\n *     var Tea = function (name) { this.name = name; }\n *     , chai = new Tea('chai');\n *\n *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n *\n * @name instanceOf\n * @param {object} val\n * @param {object} type\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.instanceOf = function (val, type, msg) {\n  new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n};\n\n/**\n * ### .notInstanceOf(object, constructor, [message])\n *\n * Asserts `value` is not an instance of `constructor`.\n *\n *     var Tea = function (name) { this.name = name; }\n *     , chai = new String('chai');\n *\n *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n *\n * @name notInstanceOf\n * @param {object} val\n * @param {object} type\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notInstanceOf = function (val, type, msg) {\n  new Assertion(val, msg, assert.notInstanceOf, true)\n    .to.not.be.instanceOf(type);\n};\n\n/**\n * ### .include(haystack, needle, [message])\n *\n * Asserts that `haystack` includes `needle`. Can be used to assert the\n * inclusion of a value in an array, a substring in a string, or a subset of\n * properties in an object.\n *\n *     assert.include([1,2,3], 2, 'array contains value');\n *     assert.include('foobar', 'foo', 'string contains substring');\n *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n *\n * Strict equality (===) is used. When asserting the inclusion of a value in\n * an array, the array is searched for an element that's strictly equal to the\n * given value. When asserting a subset of properties in an object, the object\n * is searched for the given property keys, checking that each one is present\n * and strictly equal to the given property value. For instance:\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.include([obj1, obj2], obj1);\n *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n *\n * @name include\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.include = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.include, true).include(inc);\n};\n\n/**\n * ### .notInclude(haystack, needle, [message])\n *\n * Asserts that `haystack` does not include `needle`. Can be used to assert\n * the absence of a value in an array, a substring in a string, or a subset of\n * properties in an object.\n *\n *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n *\n * Strict equality (===) is used. When asserting the absence of a value in an\n * array, the array is searched to confirm the absence of an element that's\n * strictly equal to the given value. When asserting a subset of properties in\n * an object, the object is searched to confirm that at least one of the given\n * property keys is either not present or not strictly equal to the given\n * property value. For instance:\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.notInclude([obj1, obj2], {a: 1});\n *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n *\n * @name notInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notInclude = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n};\n\n/**\n * ### .deepInclude(haystack, needle, [message])\n *\n * Asserts that `haystack` includes `needle`. Can be used to assert the\n * inclusion of a value in an array or a subset of properties in an object.\n * Deep equality is used.\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.deepInclude([obj1, obj2], {a: 1});\n *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n *\n * @name deepInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepInclude = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n};\n\n/**\n * ### .notDeepInclude(haystack, needle, [message])\n *\n * Asserts that `haystack` does not include `needle`. Can be used to assert\n * the absence of a value in an array or a subset of properties in an object.\n * Deep equality is used.\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.notDeepInclude([obj1, obj2], {a: 9});\n *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n *\n * @name notDeepInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepInclude = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n};\n\n/**\n * ### .nestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n *\n * @name nestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.nestedInclude = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n};\n\n/**\n * ### .notNestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n *\n * @name notNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notNestedInclude = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.notNestedInclude, true)\n    .not.nested.include(inc);\n};\n\n/**\n * ### .deepNestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while checking for deep equality.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n *\n * @name deepNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepNestedInclude = function(exp, inc, msg) {\n  new Assertion(exp, msg, assert.deepNestedInclude, true)\n    .deep.nested.include(inc);\n};\n\n/**\n * ### .notDeepNestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while checking for deep equality.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n *\n * @name notDeepNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepNestedInclude = function(exp, inc, msg) {\n  new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n    .not.deep.nested.include(inc);\n};\n\n/**\n * ### .ownInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while ignoring inherited properties.\n *\n *     assert.ownInclude({ a: 1 }, { a: 1 });\n *\n * @name ownInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.ownInclude = function(exp, inc, msg) {\n  new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n};\n\n/**\n * ### .notOwnInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while ignoring inherited properties.\n *\n *     Object.prototype.b = 2;\n *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n *\n * @name notOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notOwnInclude = function(exp, inc, msg) {\n  new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n};\n\n/**\n * ### .deepOwnInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while ignoring inherited properties and checking for deep equality.\n *\n *     assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n *\n * @name deepOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepOwnInclude = function(exp, inc, msg) {\n  new Assertion(exp, msg, assert.deepOwnInclude, true)\n    .deep.own.include(inc);\n};\n\n/**\n * ### .notDeepOwnInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while ignoring inherited properties and checking for deep equality.\n *\n *     assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n *\n * @name notDeepOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepOwnInclude = function(exp, inc, msg) {\n  new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n    .not.deep.own.include(inc);\n};\n\n/**\n * ### .match(value, regexp, [message])\n *\n * Asserts that `value` matches the regular expression `regexp`.\n *\n *     assert.match('foobar', /^foo/, 'regexp matches');\n *\n * @name match\n * @param {unknown} exp\n * @param {RegExp} re\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.match = function (exp, re, msg) {\n  new Assertion(exp, msg, assert.match, true).to.match(re);\n};\n\n/**\n * ### .notMatch(value, regexp, [message])\n *\n * Asserts that `value` does not match the regular expression `regexp`.\n *\n *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n *\n * @name notMatch\n * @param {unknown} exp\n * @param {RegExp} re\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notMatch = function (exp, re, msg) {\n  new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n};\n\n/**\n * ### .property(object, property, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property`.\n *\n *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n *\n * @name property\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.property = function (obj, prop, msg) {\n  new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n};\n\n/**\n * ### .notProperty(object, property, [message])\n *\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property`.\n *\n *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n *\n * @name notProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg, assert.notProperty, true)\n    .to.not.have.property(prop);\n};\n\n/**\n * ### .propertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property` with a value given by `value`. Uses a strict equality check\n * (===).\n *\n *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n *\n * @name propertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.propertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.propertyVal, true)\n    .to.have.property(prop, val);\n};\n\n/**\n * ### .notPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property` with value given by `value`. Uses a strict equality check\n * (===).\n *\n *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n *\n * @name notPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.notPropertyVal, true)\n    .to.not.have.property(prop, val);\n};\n\n/**\n * ### .deepPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property` with a value given by `value`. Uses a deep equality check.\n *\n *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n *\n * @name deepPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.deepPropertyVal, true)\n    .to.have.deep.property(prop, val);\n};\n\n/**\n * ### .notDeepPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property` with value given by `value`. Uses a deep equality check.\n *\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n *\n * @name notDeepPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n    .to.not.have.deep.property(prop, val);\n};\n\n/**\n * ### .ownProperty(object, property, [message])\n *\n * Asserts that `object` has a direct property named by `property`. Inherited\n * properties aren't checked.\n *\n *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n *\n * @name ownProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */\nassert.ownProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg, assert.ownProperty, true)\n    .to.have.own.property(prop);\n};\n\n/**\n * ### .notOwnProperty(object, property, [message])\n *\n * Asserts that `object` does _not_ have a direct property named by\n * `property`. Inherited properties aren't checked.\n *\n *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n *     assert.notOwnProperty({}, 'toString');\n *\n * @name notOwnProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */\nassert.notOwnProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg, assert.notOwnProperty, true)\n    .to.not.have.own.property(prop);\n};\n\n/**\n * ### .ownPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct property named by `property` and a value\n * equal to the provided `value`. Uses a strict equality check (===).\n * Inherited properties aren't checked.\n *\n *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n *\n * @name ownPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.ownPropertyVal = function (obj, prop, value, msg) {\n  new Assertion(obj, msg, assert.ownPropertyVal, true)\n    .to.have.own.property(prop, value);\n};\n\n/**\n * ### .notOwnPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct property named by `property`\n * with a value equal to the provided `value`. Uses a strict equality check\n * (===). Inherited properties aren't checked.\n *\n *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n *\n * @name notOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.notOwnPropertyVal = function (obj, prop, value, msg) {\n  new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n    .to.not.have.own.property(prop, value);\n};\n\n/**\n * ### .deepOwnPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct property named by `property` and a value\n * equal to the provided `value`. Uses a deep equality check. Inherited\n * properties aren't checked.\n *\n *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n *\n * @name deepOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n  new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n    .to.have.deep.own.property(prop, value);\n};\n\n/**\n * ### .notDeepOwnPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct property named by `property`\n * with a value equal to the provided `value`. Uses a deep equality check.\n * Inherited properties aren't checked.\n *\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n *\n * @name notDeepOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n  new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n    .to.not.have.deep.own.property(prop, value);\n};\n\n/**\n * ### .nestedProperty(object, property, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property`, which can be a string using dot- and bracket-notation for\n * nested reference.\n *\n *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n *\n * @name nestedProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.nestedProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg, assert.nestedProperty, true)\n    .to.have.nested.property(prop);\n};\n\n/**\n * ### .notNestedProperty(object, property, [message])\n *\n * Asserts that `object` does _not_ have a property named by `property`, which\n * can be a string using dot- and bracket-notation for nested reference. The\n * property cannot exist on the object nor anywhere in its prototype chain.\n *\n *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n *\n * @name notNestedProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notNestedProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg, assert.notNestedProperty, true)\n    .to.not.have.nested.property(prop);\n};\n\n/**\n * ### .nestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a property named by `property` with value given\n * by `value`. `property` can use dot- and bracket-notation for nested\n * reference. Uses a strict equality check (===).\n *\n *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n *\n * @name nestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.nestedPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.nestedPropertyVal, true)\n    .to.have.nested.property(prop, val);\n};\n\n/**\n * ### .notNestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a property named by `property` with\n * value given by `value`. `property` can use dot- and bracket-notation for\n * nested reference. Uses a strict equality check (===).\n *\n *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n *\n * @name notNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notNestedPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n    .to.not.have.nested.property(prop, val);\n};\n\n/**\n * ### .deepNestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a property named by `property` with a value given\n * by `value`. `property` can use dot- and bracket-notation for nested\n * reference. Uses a deep equality check.\n *\n *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n *\n * @name deepNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n    .to.have.deep.nested.property(prop, val);\n};\n\n/**\n * ### .notDeepNestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a property named by `property` with\n * value given by `value`. `property` can use dot- and bracket-notation for\n * nested reference. Uses a deep equality check.\n *\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n *\n * @name notDeepNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n    .to.not.have.deep.nested.property(prop, val);\n}\n\n/**\n * ### .lengthOf(object, length, [message])\n *\n * Asserts that `object` has a `length` or `size` with the expected value.\n *\n *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n *     assert.lengthOf('foobar', 6, 'string has length of 6');\n *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n *\n * @name lengthOf\n * @param {unknown} exp\n * @param {number} len\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.lengthOf = function (exp, len, msg) {\n  new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n};\n\n/**\n * ### .hasAnyKeys(object, [keys], [message])\n *\n * Asserts that `object` has at least one of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name hasAnyKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAnyKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n}\n\n/**\n * ### .hasAllKeys(object, [keys], [message])\n *\n * Asserts that `object` has all and only all of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name hasAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAllKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n}\n\n/**\n * ### .containsAllKeys(object, [keys], [message])\n *\n * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}]);\n *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name containsAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.containsAllKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.containsAllKeys, true)\n    .to.contain.all.keys(keys);\n}\n\n/**\n * ### .doesNotHaveAnyKeys(object, [keys], [message])\n *\n * Asserts that `object` has none of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);\n *\n * @name doesNotHaveAnyKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n    .to.not.have.any.keys(keys);\n}\n\n/**\n * ### .doesNotHaveAllKeys(object, [keys], [message])\n *\n * Asserts that `object` does not have at least one of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);\n *\n * @name doesNotHaveAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAllKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n    .to.not.have.all.keys(keys);\n}\n\n/**\n * ### .hasAnyDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` has at least one of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name hasAnyDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAnyDeepKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n    .to.have.any.deep.keys(keys);\n}\n\n/**\n * ### .hasAllDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` has all and only all of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name hasAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAllDeepKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n    .to.have.all.deep.keys(keys);\n}\n\n/**\n * ### .containsAllDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` contains all of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name containsAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.containsAllDeepKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n    .to.contain.all.deep.keys(keys);\n}\n\n/**\n * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` has none of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n *\n * @name doesNotHaveAnyDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n    .to.not.have.any.deep.keys(keys);\n}\n\n/**\n * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` does not have at least one of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n *\n * @name doesNotHaveAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n  new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n    .to.not.have.all.deep.keys(keys);\n}\n\n/**\n * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n *\n * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n * instance of `errorLike`.\n * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n * instance as `errorLike`.\n * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n * message matching `errMsgMatcher`.\n *\n *     assert.throws(fn, 'Error thrown must have this msg');\n *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n *     assert.throws(fn, ReferenceError);\n *     assert.throws(fn, errorInstance);\n *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n *\n * @name throws\n * @alias throw\n * @alias Throw\n * @param {Function} fn\n * @param {Error} errorLike\n * @param {RegExp | string} errMsgMatcher\n * @param {string} msg\n * @returns {unknown}\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @namespace Assert\n * @public\n */\nassert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n  if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n    errMsgMatcher = errorLike;\n    errorLike = null;\n  }\n\n  var assertErr = new Assertion(fn, msg, assert.throws, true)\n    .to.throw(errorLike, errMsgMatcher);\n  return flag(assertErr, 'object');\n};\n\n/**\n * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n *\n * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n * instance of `errorLike`.\n * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n * instance as `errorLike`.\n * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n * message matching `errMsgMatcher`.\n *\n *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n *     assert.doesNotThrow(fn, Error);\n *     assert.doesNotThrow(fn, errorInstance);\n *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n *\n * @name doesNotThrow\n * @param {Function} fn\n * @param {Error} errorLike\n * @param {RegExp | string} errMsgMatcher\n * @param {string} message\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @namespace Assert\n * @public\n */\nassert.doesNotThrow = function (fn, errorLike, errMsgMatcher, message) {\n  if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n    errMsgMatcher = errorLike;\n    errorLike = null;\n  }\n\n  new Assertion(fn, message, assert.doesNotThrow, true)\n    .to.not.throw(errorLike, errMsgMatcher);\n};\n\n/**\n * ### .operator(val1, operator, val2, [message])\n *\n * Compares two values using `operator`.\n *\n *     assert.operator(1, '<', 2, 'everything is ok');\n *     assert.operator(1, '>', 2, 'this will fail');\n *\n * @name operator\n * @param {unknown} val\n * @param {string} operator\n * @param {unknown} val2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.operator = function (val, operator, val2, msg) {\n  var ok;\n  switch(operator) {\n    case '==':\n      ok = val == val2;\n      break;\n    case '===':\n      ok = val === val2;\n      break;\n    case '>':\n      ok = val > val2;\n      break;\n    case '>=':\n      ok = val >= val2;\n      break;\n    case '<':\n      ok = val < val2;\n      break;\n    case '<=':\n      ok = val <= val2;\n      break;\n    case '!=':\n      ok = val != val2;\n      break;\n    case '!==':\n      ok = val !== val2;\n      break;\n    default:\n      msg = msg ? msg + ': ' : msg;\n      throw new AssertionError(\n        msg + 'Invalid operator \"' + operator + '\"',\n        undefined,\n        assert.operator\n      );\n  }\n  var test = new Assertion(ok, msg, assert.operator, true);\n  test.assert(\n      true === flag(test, 'object')\n    , 'expected ' + inspect(val) + ' to be ' + operator + ' ' + inspect(val2)\n    , 'expected ' + inspect(val) + ' to not be ' + operator + ' ' + inspect(val2) );\n};\n\n/**\n * ### .closeTo(actual, expected, delta, [message])\n *\n * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n *\n *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n *\n * @name closeTo\n * @param {number} act\n * @param {number} exp\n * @param {number} delta\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.closeTo = function (act, exp, delta, msg) {\n  new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n};\n\n/**\n * ### .approximately(actual, expected, delta, [message])\n *\n * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n *\n *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n *\n * @name approximately\n * @param {number} act\n * @param {number} exp\n * @param {number} delta\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.approximately = function (act, exp, delta, msg) {\n  new Assertion(act, msg, assert.approximately, true)\n    .to.be.approximately(exp, delta);\n};\n\n/**\n * ### .sameMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in any order. Uses a\n * strict equality check (===).\n *\n *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n *\n * @name sameMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.sameMembers, true)\n    .to.have.same.members(set2);\n}\n\n/**\n * ### .notSameMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in any order.\n * Uses a strict equality check (===).\n *\n *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n *\n * @name notSameMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.notSameMembers, true)\n    .to.not.have.same.members(set2);\n}\n\n/**\n * ### .sameDeepMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in any order. Uses a\n * deep equality check.\n *\n *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n *\n * @name sameDeepMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameDeepMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.sameDeepMembers, true)\n    .to.have.same.deep.members(set2);\n}\n\n/**\n * ### .notSameDeepMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in any order.\n * Uses a deep equality check.\n *\n *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n *\n * @name notSameDeepMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameDeepMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.notSameDeepMembers, true)\n    .to.not.have.same.deep.members(set2);\n}\n\n/**\n * ### .sameOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in the same order.\n * Uses a strict equality check (===).\n *\n *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n *\n * @name sameOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameOrderedMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.sameOrderedMembers, true)\n    .to.have.same.ordered.members(set2);\n}\n\n/**\n * ### .notSameOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in the same\n * order. Uses a strict equality check (===).\n *\n *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n *\n * @name notSameOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameOrderedMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n    .to.not.have.same.ordered.members(set2);\n}\n\n/**\n * ### .sameDeepOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in the same order.\n * Uses a deep equality check.\n *\n *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n *\n * @name sameDeepOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameDeepOrderedMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n    .to.have.same.deep.ordered.members(set2);\n}\n\n/**\n * ### .notSameDeepOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in the same\n * order. Uses a deep equality check.\n *\n *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n *\n * @name notSameDeepOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n    .to.not.have.same.deep.ordered.members(set2);\n}\n\n/**\n * ### .includeMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in any order. Uses a\n * strict equality check (===). Duplicates are ignored.\n *\n *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n *\n * @name includeMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.includeMembers, true)\n    .to.include.members(subset);\n}\n\n/**\n * ### .notIncludeMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in any order. Uses a\n * strict equality check (===). Duplicates are ignored.\n *\n *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n *\n * @name notIncludeMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.notIncludeMembers, true)\n    .to.not.include.members(subset);\n}\n\n/**\n * ### .includeDeepMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in any order. Uses a deep\n * equality check. Duplicates are ignored.\n *\n *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n *\n * @name includeDeepMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeDeepMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.includeDeepMembers, true)\n    .to.include.deep.members(subset);\n}\n\n/**\n * ### .notIncludeDeepMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in any order. Uses a\n * deep equality check. Duplicates are ignored.\n *\n *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n *\n * @name notIncludeDeepMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeDeepMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n    .to.not.include.deep.members(subset);\n}\n\n/**\n * ### .includeOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a strict equality\n * check (===).\n *\n *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n *\n * @name includeOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeOrderedMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.includeOrderedMembers, true)\n    .to.include.ordered.members(subset);\n}\n\n/**\n * ### .notIncludeOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a strict equality\n * check (===).\n *\n *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n *\n * @name notIncludeOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeOrderedMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n    .to.not.include.ordered.members(subset);\n}\n\n/**\n * ### .includeDeepOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a deep equality\n * check.\n *\n *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n *\n * @name includeDeepOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeDeepOrderedMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n    .to.include.deep.ordered.members(subset);\n}\n\n/**\n * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a deep equality\n * check.\n *\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n *\n * @name notIncludeDeepOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n    .to.not.include.deep.ordered.members(subset);\n}\n\n/**\n * ### .oneOf(inList, list, [message])\n *\n * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n *\n *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n *\n * @name oneOf\n * @param {*} inList\n * @param {Array<*>} list\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.oneOf = function (inList, list, msg) {\n  new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n}\n\n/**\n * ### isIterable(obj, [message])\n *\n * Asserts that the target is an iterable, which means that it has a iterator\n * with the exception of `String.`\n *\n *     assert.isIterable([1, 2]);\n *\n * @param {unknown} obj\n * @param {string} [msg]\n * @namespace Assert\n * @public\n */\nassert.isIterable = function(obj, msg) {\n  if (obj == undefined || !obj[Symbol.iterator]) {\n    msg = msg ?\n      `${msg} expected ${inspect(obj)} to be an iterable` :\n      `expected ${inspect(obj)} to be an iterable`;\n\n    throw new AssertionError(\n      msg,\n      undefined,\n      assert.isIterable\n    );\n  }\n}\n\n/**\n * ### .changes(function, object, property, [message])\n *\n * Asserts that a function changes the value of a property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 22 };\n *     assert.changes(fn, obj, 'val');\n *\n * @name changes\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.changes = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n}\n\n/**\n * ### .changesBy(function, object, property, delta, [message])\n *\n * Asserts that a function changes the value of a property by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 2 };\n *     assert.changesBy(fn, obj, 'val', 2);\n *\n * @name changesBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta msg change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.changesBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.changesBy, true)\n    .to.change(obj, prop).by(delta);\n}\n\n/**\n * ### .doesNotChange(function, object, property, [message])\n *\n * Asserts that a function does not change the value of a property.\n *\n *   var obj = { val: 10 };\n *   var fn = function() { console.log('foo'); };\n *   assert.doesNotChange(fn, obj, 'val');\n *\n * @name doesNotChange\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {string} msg _optional_\n * @returns {unknown}\n * @namespace Assert\n * @public\n */\nassert.doesNotChange = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new Assertion(fn, msg, assert.doesNotChange, true)\n    .to.not.change(obj, prop);\n}\n\n/**\n * ### .changesButNotBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 10 };\n *     assert.changesButNotBy(fn, obj, 'val', 5);\n *\n * @name changesButNotBy\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {number} delta - change amount (delta)\n * @param {string} msg - message _optional_\n * @namespace Assert\n * @public\n */\nassert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.changesButNotBy, true)\n    .to.change(obj, prop).but.not.by(delta);\n}\n\n/**\n * ### .increases(function, object, property, [message])\n *\n * Asserts that a function increases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 13 };\n *     assert.increases(fn, obj, 'val');\n *\n * @public\n * @namespace Assert\n * @name increases\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {string} msg - message _optional_\n * @returns {unknown}\n */\nassert.increases = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new Assertion(fn, msg, assert.increases, true)\n    .to.increase(obj, prop);\n}\n\n/**\n * ### .increasesBy(function, object, property, delta, [message])\n *\n * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 10 };\n *     assert.increasesBy(fn, obj, 'val', 10);\n *\n * @public\n * @name increasesBy\n * @namespace Assert\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {number} delta - change amount (delta)\n * @param {string} msg - message _optional_\n */\nassert.increasesBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.increasesBy, true)\n    .to.increase(obj, prop).by(delta);\n}\n\n/**\n * ### .doesNotIncrease(function, object, property, [message])\n *\n * Asserts that a function does not increase a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 8 };\n *     assert.doesNotIncrease(fn, obj, 'val');\n *\n * @name doesNotIncrease\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotIncrease = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new Assertion(fn, msg, assert.doesNotIncrease, true)\n    .to.not.increase(obj, prop);\n}\n\n/**\n * ### .increasesButNotBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 15 };\n *     assert.increasesButNotBy(fn, obj, 'val', 10);\n *\n * @name increasesButNotBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.increasesButNotBy, true)\n    .to.increase(obj, prop).but.not.by(delta);\n}\n\n/**\n * ### .decreases(function, object, property, [message])\n *\n * Asserts that a function decreases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.decreases(fn, obj, 'val');\n *\n * @name decreases\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.decreases = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new Assertion(fn, msg, assert.decreases, true)\n    .to.decrease(obj, prop);\n}\n\n/**\n * ### .decreasesBy(function, object, property, delta, [message])\n *\n * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val -= 5 };\n *     assert.decreasesBy(fn, obj, 'val', 5);\n *\n * @name decreasesBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.decreasesBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.decreasesBy, true)\n    .to.decrease(obj, prop).by(delta);\n}\n\n/**\n * ### .doesNotDecrease(function, object, property, [message])\n *\n * Asserts that a function does not decreases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 15 };\n *     assert.doesNotDecrease(fn, obj, 'val');\n *\n * @name doesNotDecrease\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotDecrease = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new Assertion(fn, msg, assert.doesNotDecrease, true)\n    .to.not.decrease(obj, prop);\n}\n\n/**\n * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n *\n * @name doesNotDecreaseBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n    .to.not.decrease(obj, prop).by(delta);\n}\n\n/**\n * ### .decreasesButNotBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n *\n * @name decreasesButNotBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    var tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new Assertion(fn, msg, assert.decreasesButNotBy, true)\n    .to.decrease(obj, prop).but.not.by(delta);\n}\n\n/**\n * ### .ifError(object)\n *\n * Asserts if value is not a false value, and throws if it is a true value.\n * This is added to allow for chai to be a drop-in replacement for Node's\n * assert class.\n *\n *     var err = new Error('I am a custom error');\n *     assert.ifError(err); // Rethrows err!\n *\n * @name ifError\n * @param {object} val\n * @namespace Assert\n * @public\n */\nassert.ifError = function (val) {\n  if (val) {\n    throw(val);\n  }\n};\n\n/**\n * ### .isExtensible(object)\n *\n * Asserts that `object` is extensible (can have new properties added to it).\n *\n *     assert.isExtensible({});\n *\n * @name isExtensible\n * @alias extensible\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isExtensible = function (obj, msg) {\n  new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n};\n\n/**\n * ### .isNotExtensible(object)\n *\n * Asserts that `object` is _not_ extensible.\n *\n *     var nonExtensibleObject = Object.preventExtensions({});\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.freeze({});\n *\n *     assert.isNotExtensible(nonExtensibleObject);\n *     assert.isNotExtensible(sealedObject);\n *     assert.isNotExtensible(frozenObject);\n *\n * @name isNotExtensible\n * @alias notExtensible\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotExtensible = function (obj, msg) {\n  new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n};\n\n/**\n * ### .isSealed(object)\n *\n * Asserts that `object` is sealed (cannot have new properties added to it\n * and its existing properties cannot be removed).\n *\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.seal({});\n *\n *     assert.isSealed(sealedObject);\n *     assert.isSealed(frozenObject);\n *\n * @name isSealed\n * @alias sealed\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isSealed = function (obj, msg) {\n  new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n};\n\n/**\n * ### .isNotSealed(object)\n *\n * Asserts that `object` is _not_ sealed.\n *\n *     assert.isNotSealed({});\n *\n * @name isNotSealed\n * @alias notSealed\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotSealed = function (obj, msg) {\n  new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n};\n\n/**\n * ### .isFrozen(object)\n *\n * Asserts that `object` is frozen (cannot have new properties added to it\n * and its existing properties cannot be modified).\n *\n *     var frozenObject = Object.freeze({});\n *     assert.frozen(frozenObject);\n *\n * @name isFrozen\n * @alias frozen\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isFrozen = function (obj, msg) {\n  new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n};\n\n/**\n * ### .isNotFrozen(object)\n *\n * Asserts that `object` is _not_ frozen.\n *\n *     assert.isNotFrozen({});\n *\n * @name isNotFrozen\n * @alias notFrozen\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotFrozen = function (obj, msg) {\n  new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n};\n\n/**\n * ### .isEmpty(target)\n *\n * Asserts that the target does not contain any values.\n * For arrays and strings, it checks the `length` property.\n * For `Map` and `Set` instances, it checks the `size` property.\n * For non-function objects, it gets the count of own\n * enumerable string keys.\n *\n *     assert.isEmpty([]);\n *     assert.isEmpty('');\n *     assert.isEmpty(new Map);\n *     assert.isEmpty({});\n *\n * @name isEmpty\n * @alias empty\n * @param {object | Array | string | Map | Set} val\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isEmpty = function(val, msg) {\n  new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n};\n\n/**\n * ### .isNotEmpty(target)\n *\n * Asserts that the target contains values.\n * For arrays and strings, it checks the `length` property.\n * For `Map` and `Set` instances, it checks the `size` property.\n * For non-function objects, it gets the count of own\n * enumerable string keys.\n *\n *     assert.isNotEmpty([1, 2]);\n *     assert.isNotEmpty('34');\n *     assert.isNotEmpty(new Set([5, 6]));\n *     assert.isNotEmpty({ key: 7 });\n *\n * @name isNotEmpty\n * @alias notEmpty\n * @param {object | Array | string | Map | Set} val\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotEmpty = function(val, msg) {\n  new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n};\n\n/**\n * Aliases.\n *\n * @param {unknown} name\n * @param {unknown} as\n * @returns {unknown}\n */\n(function alias(name, as){\n  assert[as] = assert[name];\n  return alias;\n})\n('isOk', 'ok')\n('isNotOk', 'notOk')\n('throws', 'throw')\n('throws', 'Throw')\n('isExtensible', 'extensible')\n('isNotExtensible', 'notExtensible')\n('isSealed', 'sealed')\n('isNotSealed', 'notSealed')\n('isFrozen', 'frozen')\n('isNotFrozen', 'notFrozen')\n('isEmpty', 'empty')\n('isNotEmpty', 'notEmpty')\n('isCallable', 'isFunction')\n('isNotCallable', 'isNotFunction')\n","import {assert} from './index.js';\n\nglobalThis.assert = assert;\n"],"mappings":"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","names":["getMessage","inspect","isNaN","isRegExp","type","truncate","inspect","set","inspectObject","truncate","inspectObject","type","inspect","inspect","type","getMessage","flag","type","getMessage","addProperty","inspect","isNaN","isRegExp","flag","type","isNaN","inspect","flag","hasProperty","inspect","isRegExp","flag","inspect","matchIdx","test","type","inspect"]}