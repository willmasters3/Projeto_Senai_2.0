/**
 * @module botframework-connector
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { AppCredentials } from './appCredentials';
import { AuthenticatorResult } from './authenticatorResult';
/**
 * Federated Credentials auth implementation.
 */
export declare class FederatedAppCredentials extends AppCredentials {
    private credentials;
    private managedIdentityClientAssertion;
    private clientAudience;
    /**
     * Initializes a new instance of the [FederatedAppCredentials](xref:botframework-connector.FederatedAppCredentials) class.
     *
     * @param {string} appId App ID for the Application.
     * @param {string} clientId Client ID for the managed identity assigned to the bot.
     * @param {string} channelAuthTenant Tenant ID of the Azure AD tenant where the bot is created.
     *   - **Required** for SingleTenant app types.
     *   - **Optional** for MultiTenant app types. **Note**: '_botframework.com_' is the default tenant when no value is provided.
     *
     * More information: https://learn.microsoft.com/en-us/security/zero-trust/develop/identity-supported-account-types.
     * @param {string} oAuthScope **Optional**. The scope for the token.
     * @param {string} clientAudience **Optional**. The Audience used in the Client's Federated Credential. **Default** (_api://AzureADTokenExchange_).
     */
    constructor(appId: string, clientId: string, channelAuthTenant?: string, oAuthScope?: string, clientAudience?: string);
    /**
     * @inheritdoc
     */
    getToken(forceRefresh?: boolean): Promise<string>;
    /**
     * @inheritdoc
     */
    protected refreshToken(): Promise<AuthenticatorResult>;
    private createClientApplication;
    private fetchExternalToken;
}
//# sourceMappingURL=federatedAppCredentials.d.ts.map