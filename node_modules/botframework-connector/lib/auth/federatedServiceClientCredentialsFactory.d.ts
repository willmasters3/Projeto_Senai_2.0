/**
 * @module botframework-connector
 */
import type { ServiceClientCredentials } from '@azure/core-http';
import { ServiceClientCredentialsFactory } from './serviceClientCredentialsFactory';
/**
 * A Federated Credentials implementation of the [ServiceClientCredentialsFactory](xref:botframework-connector.ServiceClientCredentialsFactory) interface.
 */
export declare class FederatedServiceClientCredentialsFactory extends ServiceClientCredentialsFactory {
    private appId;
    private clientId;
    private tenantId?;
    private clientAudience?;
    /**
     * Initializes a new instance of the [FederatedServiceClientCredentialsFactory](xref:botframework-connector.FederatedServiceClientCredentialsFactory) class.
     *
     * @param {string} appId App ID for the Application.
     * @param {string} clientId Client ID for the managed identity assigned to the bot.
     * @param {string} tenantId Tenant ID of the Azure AD tenant where the bot is created.
     *   - **Required** for SingleTenant app types.
     *   - **Optional** for MultiTenant app types. **Note**: '_botframework.com_' is the default tenant when no value is provided.
     *
     * More information: https://learn.microsoft.com/en-us/security/zero-trust/develop/identity-supported-account-types.
     * @param {string} clientAudience **Optional**. The Audience used in the Client's Federated Credential. **Default** (_api://AzureADTokenExchange_).
     */
    constructor(appId: string, clientId: string, tenantId?: string, clientAudience?: string);
    /**
     * @inheritdoc
     */
    isValidAppId(appId?: string): Promise<boolean>;
    /**
     * @inheritdoc
     */
    isAuthenticationDisabled(): Promise<boolean>;
    /**
     * @inheritdoc
     */
    createCredentials(appId: string, audience: string): Promise<ServiceClientCredentials>;
}
//# sourceMappingURL=federatedServiceClientCredentialsFactory.d.ts.map